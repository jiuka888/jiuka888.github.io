import{_ as a,c as t,o as e,a4 as p}from"./chunks/framework.DpC1ZpOZ.js";const u=JSON.parse('{"title":"设计关系型数据库","description":"","frontmatter":{},"headers":[],"relativePath":"java/DataBase/3_设计关系型数据库.md","filePath":"java/DataBase/3_设计关系型数据库.md","lastUpdated":null}'),r={name:"java/DataBase/3_设计关系型数据库.md"},o=p('<h1 id="设计关系型数据库" tabindex="-1">设计关系型数据库 <a class="header-anchor" href="#设计关系型数据库" aria-label="Permalink to &quot;设计关系型数据库&quot;">​</a></h1><p>关系数据库管理系统（RDBMS）架构图如下：</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/java-notes/database/db.png" width="500px"></div><h2 id="存储" tabindex="-1">存储 <a class="header-anchor" href="#存储" aria-label="Permalink to &quot;存储&quot;">​</a></h2><p>存储即文件系统。存储介质可以是机械硬盘、SSD 固态。</p><h2 id="程序实例" tabindex="-1">程序实例 <a class="header-anchor" href="#程序实例" aria-label="Permalink to &quot;程序实例&quot;">​</a></h2><ul><li><p><strong>存储管理</strong></p><p>对数据格式、文件风格进行统一管理，将物理数据通过逻辑形式组织、表示出来。</p><p>优化：一次性读取多行，逻辑存取单位是页（page）。</p></li><li><p><strong>缓存机制</strong></p><p>将取出的数据放入缓存中，一次性加载多个页数据，相当一部分不是本次访问所需的行。根据“一旦数据被访问，其相邻数据极有可能下次被访问到”，优化访问效率。</p><p>缓存管理机制：可以使用 LRU 对缓存进行管理。</p></li><li><p><strong>SQL 解析</strong></p><p>提供给外界指令来操作数据库，即可读的 SQL 语言。</p><p>优化：可以将 SQL 缓存，方便下次解析。缓存不宜过大，管理缓存的算法中要有淘汰机制。</p></li><li><p><strong>日志管理</strong></p><p>主从同步、灾难恢复。</p></li><li><p><strong>权限划分</strong></p><p>支持多用户。</p></li><li><p><strong>容灾机制</strong></p><p>数据库挂了，进行恢复，恢复到什么程度。</p></li><li><p><strong>索引管理</strong></p><p>引入索引，提高查询效率。</p></li><li><p><strong>锁管理</strong></p><p>引入锁机制，支持并发操作。</p></li></ul>',7),s=[o];function n(i,l,_,d,c,h){return e(),t("div",null,s)}const m=a(r,[["render",n]]);export{u as __pageData,m as default};
