import{_ as a,c as t,o as e,a4 as i}from"./chunks/framework.DpC1ZpOZ.js";const A=JSON.parse('{"title":"一、CAP 理论","description":"","frontmatter":{},"headers":[],"relativePath":"java/distribution/2_CAP理论.md","filePath":"java/distribution/2_CAP理论.md","lastUpdated":null}'),o={name:"java/distribution/2_CAP理论.md"},l=i('<h1 id="一、cap-理论" tabindex="-1">一、CAP 理论 <a class="header-anchor" href="#一、cap-理论" aria-label="Permalink to &quot;一、CAP 理论&quot;">​</a></h1><p>分布式系统不可能同时满足一致性（C：Consistency）、可用性（A：Availability）和分区容忍性（P：Partition Tolerance），最多只能同时满足其中两项。</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/java-notes/distribution/cap.png"></div><h2 id="一致性-consistency" tabindex="-1">一致性（Consistency） <a class="header-anchor" href="#一致性-consistency" aria-label="Permalink to &quot;一致性（Consistency）&quot;">​</a></h2><p>一致性指的是多个数据副本是否能保持一致的特性，在一致性的条件下，系统在执行数据更新操作之后能够从一致性状态转移到另一个一致性状态。</p><p>对系统的一个数据更新成功之后，如果所有用户都能够读取到最新的值，该系统就被认为具有强一致性。</p><h2 id="可用性-availability" tabindex="-1">可用性（Availability） <a class="header-anchor" href="#可用性-availability" aria-label="Permalink to &quot;可用性（Availability）&quot;">​</a></h2><p>可用性指分布式系统在面对各种异常时可以提供正常服务的能力，可以用系统可用时间占总时间的比值来衡量，4 个 9 的可用性表示系统 99.99% 的时间是可用的。</p><p>在可用性条件下，要求系统提供的服务一直处于可用的状态，对于用户的每一个操作请求总是能够在有限的时间内返回结果。</p><h2 id="分区容忍性-partition-tolerance" tabindex="-1">分区容忍性（Partition Tolerance） <a class="header-anchor" href="#分区容忍性-partition-tolerance" aria-label="Permalink to &quot;分区容忍性（Partition Tolerance）&quot;">​</a></h2><p>网络分区指分布式系统中的节点被划分为多个区域，每个区域内部可以通信，但是区域之间无法通信。</p><p>在分区容忍性条件下，分布式系统在遇到任何网络分区故障的时候，仍然需要能对外提供一致性和可用性的服务，除非是整个网络环境都发生了故障。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>在分布式系统中，分区容忍性必不可少，因为需要总是假设网络是不可靠的。因此，CAP 理论实际上是要在<strong>可用性（P）和一致性（C）之间做权衡</strong>。</p><p>可用性和一致性往往是冲突的，很难使它们同时满足。在多个节点之间进行数据同步时，</p><ul><li>为了保证一致性（CP），不能访问未同步完成的节点，也就失去了部分可用性，zookeeper其实就是追求的强一致；</li><li>为了保证可用性（AP），放弃一致性(这里说的一致性是强一致性)，追求分区容错性和可用性，这是很多分布式系统设计时的选择，后面的BASE也是根据AP来扩展。</li></ul><p>注意：如果系统没有发生 ”分区“ 的话，节点间的网络连接通信正常的话，也就不存在 P 了。此时需要考虑保证 CA 了。</p><h1 id="二、base-理论" tabindex="-1">二、BASE 理论 <a class="header-anchor" href="#二、base-理论" aria-label="Permalink to &quot;二、BASE 理论&quot;">​</a></h1><p>在分布式系统中，我们往往追求的是<strong>可用性</strong>，它的重要程序比一致性要高，那么如何实现高可用性呢？ 前人已经给我们提出来了另外一个理论，就是 BASE 理论，它是用来对 CAP 定理进行进一步扩充的，更具体地说，<strong>BASE 是 CAP 理论中 AP 方案的延伸。</strong></p><p>BASE 是基本可用（Basically Available）、软状态（Soft State）和最终一致性（Eventually Consistent）三个短语的缩写。</p><p>BASE 理论是对 CAP 中一致性和可用性权衡的结果，它的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</p><h2 id="基本可用-basically-available" tabindex="-1">基本可用 (Basically Available) <a class="header-anchor" href="#基本可用-basically-available" aria-label="Permalink to &quot;基本可用 (Basically Available)&quot;">​</a></h2><p>指分布式系统在出现故障的时候，保证核心可用，允许损失部分可用性。</p><p>例如，电商在做促销时，为了保证购物系统的稳定性，部分消费者可能会被引导到一个降级的页面。</p><h2 id="软状态-soft-state" tabindex="-1">软状态 (Soft state) <a class="header-anchor" href="#软状态-soft-state" aria-label="Permalink to &quot;软状态 (Soft state)&quot;">​</a></h2><p>指允许系统中的数据存在中间状态，并认为该中间状态不会影响系统整体可用性，即允许系统不同节点的数据副本之间进行同步的过程存在时延。</p><h2 id="最终一致性-eventually-consistent" tabindex="-1">最终一致性 (Eventually Consistent) <a class="header-anchor" href="#最终一致性-eventually-consistent" aria-label="Permalink to &quot;最终一致性 (Eventually Consistent)&quot;">​</a></h2><p>最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能达到一致的状态。</p><p><strong>ACID 要求强一致性</strong>，通常运用在传统的数据库系统上。而 BASE 要求最终一致性，通过<strong>牺牲强一致性来达到可用性</strong>，通常运用在大型分布式系统中。</p><p>在实际的分布式场景中，不同业务单元和组件对一致性的要求是不同的，因此 ACID 和 BASE 往往会结合在一起使用。</p>',30),n=[l];function r(s,c,p,h,d,u){return e(),t("div",null,n)}const P=a(o,[["render",r]]);export{A as __pageData,P as default};
