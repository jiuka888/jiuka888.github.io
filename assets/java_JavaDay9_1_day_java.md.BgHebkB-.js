import{_ as t,c as a,o as s,a4 as l}from"./chunks/framework.DpC1ZpOZ.js";const y=JSON.parse('{"title":"在菜鸟教程看文档复习java","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"java/JavaDay9/1_day_java.md","filePath":"java/JavaDay9/1_day_java.md","lastUpdated":1728037326000}'),i={name:"java/JavaDay9/1_day_java.md"},e=l(`<h1 id="在菜鸟教程看文档复习java" tabindex="-1">在菜鸟教程看文档复习java <a class="header-anchor" href="#在菜鸟教程看文档复习java" aria-label="Permalink to &quot;在菜鸟教程看文档复习java&quot;">​</a></h1><p>链接：<a href="https://www.runoob.com/java/java-tutorial.html" target="_blank" rel="noreferrer">https://www.runoob.com/java/java-tutorial.html</a></p><h2 id="window系统安装java" tabindex="-1">window系统安装java <a class="header-anchor" href="#window系统安装java" aria-label="Permalink to &quot;window系统安装java&quot;">​</a></h2><h3 id="下载jdk" tabindex="-1">下载JDK <a class="header-anchor" href="#下载jdk" aria-label="Permalink to &quot;下载JDK&quot;">​</a></h3><ul><li><p>首先我们需要下载 <code>java</code> 开发工具包 <code>JDK</code>，<a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noreferrer">下载地址</a>，在下载页面中根据自己的系统选择对应的版本，本文以 <code>Window11</code> 64位系统为例：jdk-8u401-windows-x64</p></li><li><p>下载后 <code>JDK</code> 的安装根据提示进行，还有安装 <code>JDK</code> 的时候也会安装 <code>JRE</code>，一并安装就可以了。</p></li><li><p>安装<code>JDK</code>，安装过程中可以自定义安装目录等信息，例如我们选择安装目录为 C:\\Program Files\\Java\\jdk-1.8</p></li></ul><h3 id="配置环境变量" tabindex="-1">配置环境变量 <a class="header-anchor" href="#配置环境变量" aria-label="Permalink to &quot;配置环境变量&quot;">​</a></h3><ul><li><p>安装完成后，右击&quot;我的电脑&quot;，点击&quot;属性&quot;，选择&quot;高级系统设置&quot;；</p></li><li><p>选择&quot;高级&quot;选项卡，点击&quot;环境变量&quot;；</p></li><li><p>在 &quot;系统变量&quot; 中设置 3 项属性，JAVA_HOME、PATH、CLASSPATH(大小写无所谓),若已存在则点击&quot;编辑&quot;，不存在则点击&quot;新建&quot;。 Java 八个基本类型，基本类型都有对应的包装类型：</p></li><li><p>变量设置参数如下：</p></li></ul><table tabindex="0"><thead><tr><th style="text-align:center;">变量名</th><th style="text-align:center;">变量值</th></tr></thead><tbody><tr><td style="text-align:center;">JAVA_HOME</td><td style="text-align:center;">C:\\Program Files\\Java\\jdk-1.8</td></tr><tr><td style="text-align:center;">CLASSPATH</td><td style="text-align:center;">.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</td></tr><tr><td style="text-align:center;">Path</td><td style="text-align:center;">%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;</td></tr></tbody></table><h3 id="测试jdk是否安装成功" tabindex="-1">测试JDK是否安装成功 <a class="header-anchor" href="#测试jdk是否安装成功" aria-label="Permalink to &quot;测试JDK是否安装成功&quot;">​</a></h3><ul><li><ol><li>&quot;开始&quot;-&gt;&quot;运行&quot;，键入&quot;cmd&quot;；</li></ol></li><li><ol start="2"><li>输入命令: java -version、java、javac 几个命令，出现版本信息，说明环境变量配置成功；</li></ol></li></ul><h2 id="流行-java-开发工具" tabindex="-1">流行 Java 开发工具 <a class="header-anchor" href="#流行-java-开发工具" aria-label="Permalink to &quot;流行 Java 开发工具&quot;">​</a></h2><p>正所谓工欲善其事必先利其器，我们在开发 Java 语言过程中同样需要一款不错的开发工具，目前市场上的 IDE 很多，本文为大家推荐以下下几款 Java 开发工具：</p><ul><li>JetBrains 的 IDEA， 现在很多人开始使用了，功能很强大，<a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">下载地址</a></li><li>VSCode （全称：Visual Studio Code）是一款由微软开发且跨平台的免费源代码编辑器。<a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">下载地址</a></li><li>Netbeans:开源免费的 Java IDE，<a href="https://www.netbeans.org/index.html" target="_blank" rel="noreferrer">下载地址</a></li><li>Eclipse:另一个免费开源的 Java IDE，<a href="https://www.eclipse.org/downloads/packages/" target="_blank" rel="noreferrer">下载地址</a></li></ul><h3 id="使用-intellij-idea创建第一个-java-应用" tabindex="-1">使用 IntelliJ IDEA创建第一个 Java 应用 <a class="header-anchor" href="#使用-intellij-idea创建第一个-java-应用" aria-label="Permalink to &quot;使用 IntelliJ IDEA创建第一个 Java 应用&quot;">​</a></h3><ol><li>启动 IntelliJ IDEA。</li><li>在欢迎屏幕中单击&quot;新建项目&quot;。</li><li>在&quot;新建项目&quot;向导中，从左侧列表中选择&quot;Java&quot;。</li><li>为项目命名（例如 HelloWorld）并根据需要更改默认位置。</li><li>在本教程中，我们不会使用版本控制系统，因此请禁用&quot;创建 Git 存储库&quot;选项。</li><li>确保在构建系统中选择了 IntelliJ。</li></ol><ul><li>写个输出 Hello World 的代码:</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>创建包和类，在项目工具窗口中，右键单击 src 文件夹，选择新建，然后选择 Java 类。 在名称字段中，输入 com.example.helloworld.HelloWorld 并点击确定，IntelliJ IDEA 将创建 com.example.helloworld 包和 HelloWorld 类。</li></ul><h2 id="java-基础语法" tabindex="-1">Java 基础语法 <a class="header-anchor" href="#java-基础语法" aria-label="Permalink to &quot;Java 基础语法&quot;">​</a></h2><ul><li><p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p></li><li><p>对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p></li><li><p>类：类是一个模板，它描述一类对象的行为和状态。</p></li><li><p>方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</p></li><li><p>实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</p></li></ul><h3 id="用文本写简单的java程序" tabindex="-1">用文本写简单的Java程序 <a class="header-anchor" href="#用文本写简单的java程序" aria-label="Permalink to &quot;用文本写简单的Java程序&quot;">​</a></h3><ul><li>下面看一个简单的 Java 程序，它将输出字符串 Hello World</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/662E827A-FA32-4464-B0BD-40087F429E98.jpg" alt="1_day_java_01" loading="lazy"> 下面将逐步介绍如何保存、编译以及运行这个程序：</p><p>打开代码编辑器，把上面的代码添加进去；</p><ul><li>把文件名保存为：<code>HelloWorld.java</code>；</li><li>打开 cmd 命令窗口，进入目标文件所在的位置，假设是 C:\\</li><li>在命令行窗口输入 <code>javac HelloWorld.java</code> 按下回车键编译代码。如果代码没有错误，cmd 命令提示符会进入下一行（假设环境变量都设置好了）。</li><li>再键输入 <code>java HelloWorld</code> 按下回车键就可以运行程序了</li><li>你将会在窗口看到 Hello World</li></ul><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javac HelloWorld.java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java HelloWorld </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Hello World</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="基本语法" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h3><p>编写 Java 程序时，应注意以下几点：</p><ul><li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li><li>类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <code>MyFirstJavaClass</code> 。</li><li><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li><li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 .java。（如果文件名和类名不相同则会导致编译错误）。</li><li><strong>主方法入口</strong>：所有的 Java 程序由 <code>public static void main(String[] args)</code> 方法开始执行。</li></ul><h3 id="java-标识符" tabindex="-1">Java 标识符 <a class="header-anchor" href="#java-标识符" aria-label="Permalink to &quot;Java 标识符&quot;">​</a></h3><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p><p>关于 Java 标识符，有以下几点需要注意：</p><ul><li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li><li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li><li>关键字不能用作标识符</li><li>标识符是大小写敏感的</li><li>合法标识符举例：<code>age</code>、<code>$salary</code>、<code>_value</code>、<code>__1_value</code></li><li>非法标识符举例：<code>123abc</code>、<code>-salary</code></li></ul><h3 id="java修饰符" tabindex="-1">Java修饰符 <a class="header-anchor" href="#java修饰符" aria-label="Permalink to &quot;Java修饰符&quot;">​</a></h3><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p><ul><li>访问控制修饰符 : <code>default</code>, <code>public</code> , <code>protected</code>, <code>private</code></li><li>非访问控制修饰符 : <code>final</code>, <code>abstract</code>, <code>static</code>, <code>synchronized</code> 在<strong>后面的章节中</strong>我们会深入讨论 Java 修饰符。</li></ul><p>待补充。</p><h3 id="java-变量" tabindex="-1">Java 变量 <a class="header-anchor" href="#java-变量" aria-label="Permalink to &quot;Java 变量&quot;">​</a></h3><p>Java 中主要有如下几种类型的变量</p><ul><li>局部变量</li><li>类变量（静态变量）</li><li>成员变量（非静态变量）</li></ul><h3 id="java-数组" tabindex="-1">Java 数组 <a class="header-anchor" href="#java-数组" aria-label="Permalink to &quot;Java 数组&quot;">​</a></h3><p>数组是储存在堆上的对象，可以保存多个同类型变量。在<strong>后面的章节中</strong>，我们将会学到如何声明、构造以及初始化一个数组。</p><p>待补充</p><h3 id="java-枚举" tabindex="-1">Java 枚举 <a class="header-anchor" href="#java-枚举" aria-label="Permalink to &quot;Java 枚举&quot;">​</a></h3><p>Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。</p><p>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。</p><p>实例</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FreshJuice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FreshJuiceSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SMALL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MEDIUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LARGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   FreshJuiceSize size;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FreshJuiceTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      FreshJuice juice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FreshJuice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      juice.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FreshJuice.FreshJuiceSize.MEDIUM  ;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>枚举可以单独声明或者声明在类里面。方法、变量、构造函数也可以在枚举中定义。</p></div><h3 id="java-关键字" tabindex="-1">Java 关键字 <a class="header-anchor" href="#java-关键字" aria-label="Permalink to &quot;Java 关键字&quot;">​</a></h3><p>下面列出了 Java 关键字。这些保留字不能用于常量、变量、和任何标识符的名称。</p><table tabindex="0"><thead><tr><th>类别</th><th style="text-align:left;">关键字</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td>访问控制</td><td style="text-align:left;">private</td><td style="text-align:left;">私有的</td></tr><tr><td></td><td style="text-align:left;">protected</td><td style="text-align:left;">受保护的</td></tr><tr><td></td><td style="text-align:left;">public</td><td style="text-align:left;">公共的</td></tr><tr><td></td><td style="text-align:left;">default</td><td style="text-align:left;">默认</td></tr><tr><td></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td>类、方法和变量修饰符</td><td style="text-align:left;">abstract</td><td style="text-align:left;">声明抽象</td></tr><tr><td></td><td style="text-align:left;">class</td><td style="text-align:left;">类</td></tr><tr><td></td><td style="text-align:left;">extends</td><td style="text-align:left;">扩充、继承</td></tr><tr><td></td><td style="text-align:left;">final</td><td style="text-align:left;">最终值、不可改变的</td></tr><tr><td></td><td style="text-align:left;">implements</td><td style="text-align:left;">实现（接口）</td></tr><tr><td></td><td style="text-align:left;">interface</td><td style="text-align:left;">接口</td></tr><tr><td></td><td style="text-align:left;">native</td><td style="text-align:left;">本地、原生方法（非 Java 实现）</td></tr><tr><td></td><td style="text-align:left;">new</td><td style="text-align:left;">创建</td></tr><tr><td></td><td style="text-align:left;">static</td><td style="text-align:left;">静态</td></tr><tr><td></td><td style="text-align:left;">strictfp</td><td style="text-align:left;">严格浮点、精准浮点</td></tr><tr><td></td><td style="text-align:left;">synchronized</td><td style="text-align:left;">线程、同步</td></tr><tr><td></td><td style="text-align:left;">transient</td><td style="text-align:left;">短暂</td></tr><tr><td></td><td style="text-align:left;">volatile</td><td style="text-align:left;">易失</td></tr><tr><td></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td>程序控制语句</td><td style="text-align:left;">break</td><td style="text-align:left;">跳出循环</td></tr><tr><td></td><td style="text-align:left;">case</td><td style="text-align:left;">定义一个值以供 switch 选择</td></tr><tr><td></td><td style="text-align:left;">continue</td><td style="text-align:left;">继续</td></tr><tr><td></td><td style="text-align:left;">do</td><td style="text-align:left;">运行</td></tr><tr><td></td><td style="text-align:left;">else</td><td style="text-align:left;">否则</td></tr><tr><td></td><td style="text-align:left;">for</td><td style="text-align:left;">循环</td></tr><tr><td></td><td style="text-align:left;">if</td><td style="text-align:left;">如果</td></tr><tr><td></td><td style="text-align:left;">instanceof</td><td style="text-align:left;">实例</td></tr><tr><td></td><td style="text-align:left;">return</td><td style="text-align:left;">返回</td></tr><tr><td></td><td style="text-align:left;">switch</td><td style="text-align:left;">根据值选择执行</td></tr><tr><td></td><td style="text-align:left;">while</td><td style="text-align:left;">循环</td></tr><tr><td></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td>错误处理</td><td style="text-align:left;">assert</td><td style="text-align:left;">断言表达式是否为真</td></tr><tr><td></td><td style="text-align:left;">catch</td><td style="text-align:left;">捕捉异常</td></tr><tr><td></td><td style="text-align:left;">finally</td><td style="text-align:left;">有没有异常都执行</td></tr><tr><td></td><td style="text-align:left;">throw</td><td style="text-align:left;">抛出一个异常对象</td></tr><tr><td></td><td style="text-align:left;">throws</td><td style="text-align:left;">声明一个异常可能被抛出</td></tr><tr><td></td><td style="text-align:left;">try</td><td style="text-align:left;">捕获异常</td></tr><tr><td></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td>包相关</td><td style="text-align:left;">import</td><td style="text-align:left;">引入</td></tr><tr><td></td><td style="text-align:left;">package</td><td style="text-align:left;">包</td></tr><tr><td></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td>基本类型</td><td style="text-align:left;">boolean</td><td style="text-align:left;">布尔型</td></tr><tr><td></td><td style="text-align:left;">byte</td><td style="text-align:left;">字节型</td></tr><tr><td></td><td style="text-align:left;">char</td><td style="text-align:left;">字符型</td></tr><tr><td></td><td style="text-align:left;">double</td><td style="text-align:left;">双精度浮点</td></tr><tr><td></td><td style="text-align:left;">float</td><td style="text-align:left;">单精度浮点</td></tr><tr><td></td><td style="text-align:left;">int</td><td style="text-align:left;">整型</td></tr><tr><td></td><td style="text-align:left;">long</td><td style="text-align:left;">长整型</td></tr><tr><td></td><td style="text-align:left;">short</td><td style="text-align:left;">短整型</td></tr><tr><td></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td>变量引用</td><td style="text-align:left;">super</td><td style="text-align:left;">父类、超类</td></tr><tr><td></td><td style="text-align:left;">this</td><td style="text-align:left;">本类</td></tr><tr><td></td><td style="text-align:left;">void</td><td style="text-align:left;">无返回值</td></tr><tr><td></td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr><tr><td>保留关键字</td><td style="text-align:left;">goto</td><td style="text-align:left;">是关键字，但不能使用</td></tr><tr><td></td><td style="text-align:left;">const</td><td style="text-align:left;">是关键字，但不能使用</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">注意</p><p>Java 的 null 不是关键字，类似于 true 和 false，它是一个字面常量，也不允许作为标识符使用。</p></div><h3 id="java注释" tabindex="-1">Java注释 <a class="header-anchor" href="#java注释" aria-label="Permalink to &quot;Java注释&quot;">​</a></h3><p>类似于 C/C++、Java 也支持单行以及多行注释。</p><p>注释中的字符将被 Java 编译器忽略。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloWorld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /* 这是第一个Java程序</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 它将输出 Hello World</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 这是一个多行注释的示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 这是单行注释的示例</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       /* 这个也是单行注释的示例 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>更多内容可以参考：<a href="https://www.runoob.com/java/java-comments.html" target="_blank" rel="noreferrer">Java 注释</a></p><h3 id="java-空行" tabindex="-1">Java 空行 <a class="header-anchor" href="#java-空行" aria-label="Permalink to &quot;Java 空行&quot;">​</a></h3><ul><li>空白行或者有注释的行，Java 编译器都会忽略掉。</li></ul><h3 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h3><ul><li><p>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p></li><li><p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（sub class）。</p></li></ul><h3 id="接口" tabindex="-1">接口 <a class="header-anchor" href="#接口" aria-label="Permalink to &quot;接口&quot;">​</a></h3><p>在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。</p><p>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</p><h3 id="java-源程序与编译型运行区别" tabindex="-1">Java 源程序与编译型运行区别 <a class="header-anchor" href="#java-源程序与编译型运行区别" aria-label="Permalink to &quot;Java 源程序与编译型运行区别&quot;">​</a></h3><p>如下图所示： <img src="https://www.runoob.com/wp-content/uploads/2013/12/ZSSDMld.png" alt="1_day_java_02" loading="lazy"> 下一节介绍 Java 编程中的类和对象。之后你将会对 <strong>Java 中的类和对象</strong>有更清楚的认识。</p>`,68),n=[e];function d(r,p,h,o,k,c){return s(),a("div",null,n)}const u=t(i,[["render",d]]);export{y as __pageData,u as default};
