import{_ as e,c as o,o as a,a4 as p}from"./chunks/framework.DpC1ZpOZ.js";const u=JSON.parse('{"title":"Zookeeper 概述","description":"","frontmatter":{},"headers":[],"relativePath":"java/Zookeeper/1_概述.md","filePath":"java/Zookeeper/1_概述.md","lastUpdated":1728037326000}'),r={name:"java/Zookeeper/1_概述.md"},t=p('<h1 id="zookeeper-概述" tabindex="-1">Zookeeper 概述 <a class="header-anchor" href="#zookeeper-概述" aria-label="Permalink to &quot;Zookeeper 概述&quot;">​</a></h1><p>ZooKeeper 是一个开源的<strong>分布式协调服务</strong>，它的设计目标为分布式软件提供一致性服务。</p><p>ZooKeeper 提供了一个类似 Linux 文件系统的树形结构，Zookeeper 的每个节点既可以是目录也可以是数据，同时 Zookeeper 提供了对每个节点的监控与通知机制。基于 Zookeeper 的一致性服务，可以方便地实现分布式锁、分布式选举、数据发布订阅、配置中心等功能。</p><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><ul><li><p>原子性</p><p>所有事务请求的处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功应用了某一个事务，要么都没有应用。</p></li><li><p>顺序一致性</p><p>从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到 ZooKeeper 中去。</p></li><li><p>可靠性</p><p>一旦一次更改请求被应用，更改的结果就会被持久化，直到被下一次更改覆盖。</p></li><li><p>单一系统映像</p><p>无论客户端连到哪一个 ZooKeeper 服务器，其看到的服务端数据模型都是一致的。</p></li></ul><h2 id="典型应用场景" tabindex="-1">典型应用场景 <a class="header-anchor" href="#典型应用场景" aria-label="Permalink to &quot;典型应用场景&quot;">​</a></h2><ul><li><p>统一命名服务</p><p>可以通过 ZooKeeper 的顺序节点生成全局唯一 ID。</p></li><li><p>分布式锁</p><p>通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放锁。</p></li><li><p>数据发布 / 订阅</p><p>通过 <strong>Watcher 机制</strong>可以很方便地实现数据发布 / 订阅。将数据发布到 ZooKeeper 被监听的节点上，其他机器可通过监听 ZooKeeper 上节点的变化来实现配置的动态更新。</p></li></ul><h2 id="支持的框架" tabindex="-1">支持的框架 <a class="header-anchor" href="#支持的框架" aria-label="Permalink to &quot;支持的框架&quot;">​</a></h2><ul><li><p>Kafka</p><p>ZooKeeper 主要为 Kafka 提供 Broker 和 Topic 的注册以及多个 Partition 的负载均衡等功能。</p></li><li><p>HBase</p><p>ZooKeeper 确保 Hbase 整个集群只有一个 Master 以及保存和提供 regionserver 状态信息（是否在线）等功能。</p></li><li><p>Hadoop</p><p>ZooKeeper 为 NameNode 提供高可用支持。</p></li></ul>',9),i=[t];function l(s,n,_,c,d,h){return a(),o("div",null,i)}const Z=e(r,[["render",l]]);export{u as __pageData,Z as default};
