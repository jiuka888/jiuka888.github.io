import{_ as a,c as e,o as t,a4 as r}from"./chunks/framework.DpC1ZpOZ.js";const p=JSON.parse('{"title":"HTTP 窃听和篡改","description":"","frontmatter":{},"headers":[],"relativePath":"java/Safety/6_传输安全.md","filePath":"java/Safety/6_传输安全.md","lastUpdated":1728037326000}'),i={name:"java/Safety/6_传输安全.md"},l=r('<h1 id="http-窃听和篡改" tabindex="-1">HTTP 窃听和篡改 <a class="header-anchor" href="#http-窃听和篡改" aria-label="Permalink to &quot;HTTP 窃听和篡改&quot;">​</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><p>Web 前端进行数据请求的方式，一般是使用 HTTP 方式进行的，HTTP 传输是<strong>明文</strong>方式进行传输。</p><p>前端向后端发送 HTTP 请求，中间会经过各种各样的网关、服务器节点等，最终到达我们的目标服务器。但是在这个中间的每个节点上，只要对象想获取你的 HTTP 的信息，它是可以随意的进行数据的劫持和篡改的。服务端向浏览器返回数据的时候，也是通过明文的方式是进行的。</p><h2 id="窃听危害" tabindex="-1">窃听危害 <a class="header-anchor" href="#窃听危害" aria-label="Permalink to &quot;窃听危害&quot;">​</a></h2><ul><li>窃听用户密码</li><li>窃听传输敏感信息</li><li>非法获取个人资料</li></ul><h2 id="篡改危害" tabindex="-1">篡改危害 <a class="header-anchor" href="#篡改危害" aria-label="Permalink to &quot;篡改危害&quot;">​</a></h2><ul><li>插入广告</li><li>重定向网站</li><li>无法防御 XSS 和 CSRF 攻击</li></ul><h2 id="防御" tabindex="-1">防御 <a class="header-anchor" href="#防御" aria-label="Permalink to &quot;防御&quot;">​</a></h2><h3 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h3><p>HTTP 被窃听和篡改的唯一原因，就是 HTTP 是明文传输的，所以使用 <a href="https://duhouan.github.io/Java/#/HTTP/4_HTTPs?id=https" target="_blank" rel="noreferrer">HTTPS</a> 进行密文传输防止 HTTP 窃听和篡改。</p>',11),o=[l];function h(n,s,_,T,d,c){return t(),e("div",null,o)}const u=a(i,[["render",h]]);export{p as __pageData,u as default};
