import{_ as a,c as l,o as i,a4 as t}from"./chunks/framework.DpC1ZpOZ.js";const b=JSON.parse('{"title":"抽象类和接口","description":"","frontmatter":{},"headers":[],"relativePath":"java/OO/11_抽象类和接口.md","filePath":"java/OO/11_抽象类和接口.md","lastUpdated":null}'),e={name:"java/OO/11_抽象类和接口.md"},p=t('<h1 id="抽象类和接口" tabindex="-1">抽象类和接口 <a class="header-anchor" href="#抽象类和接口" aria-label="Permalink to &quot;抽象类和接口&quot;">​</a></h1><h2 id="抽象类" tabindex="-1">抽象类 <a class="header-anchor" href="#抽象类" aria-label="Permalink to &quot;抽象类&quot;">​</a></h2><h3 id="抽象类特点" tabindex="-1">抽象类特点 <a class="header-anchor" href="#抽象类特点" aria-label="Permalink to &quot;抽象类特点&quot;">​</a></h3><ul><li><p>抽象类和抽象方法必须用 abstract 关键字修饰</p></li><li><p>抽象类不一定有抽象方法，有抽象方法的一定是抽象类</p></li><li><p>抽象类不能实例化</p></li><li><p>抽象类的子类：</p><p>要么是抽象类；要么重写抽象类的所有抽象方法</p></li></ul><h3 id="抽象类成员特点" tabindex="-1">抽象类成员特点 <a class="header-anchor" href="#抽象类成员特点" aria-label="Permalink to &quot;抽象类成员特点&quot;">​</a></h3><ul><li>成员变量：可以是常量，也可以是变量</li><li>构造方法：有构造方法，但是不能实例化（作用：<strong>用于子类访问父类数据的初始化</strong>）</li><li>成员方法：可以有抽象方法和非抽象方法</li></ul><p>注意：</p><ul><li><p>abstract 与 private、final 冲突；</p><p>（abstract 修饰的类，必须被继承；abstract 修饰的方法，应被重写。</p><p>但是 final 修饰的类、属性、方法不可被更改，所以final 修饰的方法不可以被重写。</p><p>private 修饰的类只能是内部类，private 修饰的属性、方法只能在本类中调用。）</p></li><li><p>abstract 与 static 放一起是没有意义的。</p><p>（static 修饰的方法是静态的，可以直接被类所调用。</p><p>但是 abstract 修饰的方法抽象方法，没有方法体不能够被直接调用。）</p></li></ul><h2 id="接口" tabindex="-1">接口 <a class="header-anchor" href="#接口" aria-label="Permalink to &quot;接口&quot;">​</a></h2><h3 id="接口特点" tabindex="-1">接口特点 <a class="header-anchor" href="#接口特点" aria-label="Permalink to &quot;接口特点&quot;">​</a></h3><ul><li><p>使用 interface</p></li><li><p>类实现接口使用 implements</p></li><li><p>接口不能实例化</p></li><li><p>接口的子类：</p><p>要么是抽象类；要么实现接口中所有抽象方法</p></li></ul><h3 id="接口成员特点" tabindex="-1">接口成员特点 <a class="header-anchor" href="#接口成员特点" aria-label="Permalink to &quot;接口成员特点&quot;">​</a></h3><ul><li>成员变量：只能是常量，默认是 public static final</li><li>构造方法：无</li><li>成员方法：都是抽象方法，默认是 public abstract</li></ul><h2 id="抽象类和接口的区别" tabindex="-1">抽象类和接口的区别 <a class="header-anchor" href="#抽象类和接口的区别" aria-label="Permalink to &quot;抽象类和接口的区别&quot;">​</a></h2><ul><li><p>成员区别</p><p>抽象类：常量/变量；有构造方法；有抽象方法和非抽象方法</p><p>接口：常量；无构造方法；只有抽象方法</p></li><li><p>关系区别</p><p>类与类：继承关系（单继承）</p><p>类与接口：实现关系（可以多实现）</p><p>接口与接口：继承关系（可以多继承）</p></li><li><p>设计理念区别</p><p>抽象类被继承，体现 &quot;is a &quot; 理念</p><p>接口被实现，体现 &quot;like a&quot; 理念</p></li></ul>',15),r=[p];function o(s,n,c,h,u,d){return i(),l("div",null,r)}const f=a(e,[["render",o]]);export{b as __pageData,f as default};
