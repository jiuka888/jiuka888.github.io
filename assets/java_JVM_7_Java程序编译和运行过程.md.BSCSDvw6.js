import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.DpC1ZpOZ.js";const g=JSON.parse('{"title":"Java 程序编译和运行过程","description":"","frontmatter":{},"headers":[],"relativePath":"java/JVM/7_Java程序编译和运行过程.md","filePath":"java/JVM/7_Java程序编译和运行过程.md","lastUpdated":1728037326000}'),l={name:"java/JVM/7_Java程序编译和运行过程.md"},e=n(`<h1 id="java-程序编译和运行过程" tabindex="-1">Java 程序编译和运行过程 <a class="header-anchor" href="#java-程序编译和运行过程" aria-label="Permalink to &quot;Java 程序编译和运行过程&quot;">​</a></h1><p>Java程序从 .java 文件创建到程序运行要经过两大过程：</p><ul><li>.java 文件由编译器编译成 .class文件</li><li>字节码由 JVM 解释运行</li></ul><h2 id="编译过程" tabindex="-1">编译过程 <a class="header-anchor" href="#编译过程" aria-label="Permalink to &quot;编译过程&quot;">​</a></h2><p>.java 源文件会被 Java编译器进行编译为.class文件：</p><ul><li>Java 编译一个类时，如果这个类所依赖的类还没有被编译，编译器会自动的先编译这个所依赖的类，然后引用。如果 Java 编译器在指定的目录下找不到该类所依赖的类的 .class文件或者 .java源文件，则会报 &quot;Cant found sysbol&quot; 的异常错误。</li><li>编译后的 .class 文件主要分为两部分：常量池和方法表集合。 常量池记录的是代码出现过的（常量、类名、成员变量等）以及符号引用（类引用、方法引用，成员变量引用等）； 方法表集合则记录各个方法的字节码。</li></ul><h2 id="运行过程" tabindex="-1">运行过程 <a class="header-anchor" href="#运行过程" aria-label="Permalink to &quot;运行过程&quot;">​</a></h2><p>JVM 并不是在运行时就会把所有使用到的类都加载到内存中，而是用到的时候，才加载进方法区，并且只加载一次。 Java类运行的过程大概分为两个步骤：</p><ul><li>类加载</li><li>执行类</li></ul><p>举例说明 Java 程序运行过程：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello! My Name is: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JVMTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Person p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Li Ming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        p.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_1-类加载" tabindex="-1">1. 类加载 <a class="header-anchor" href="#_1-类加载" aria-label="Permalink to &quot;1. 类加载&quot;">​</a></h3><p>首先编译 JVMTest.java 文件得到 JVMTest.class 文件，系统启动一个 JVM 进程，从 classpath 路径中找到 JVMTest.class 文件，将 JVMTest 的类信息加载到方法区中，这个过程称为 JVMTest 类的加载。</p><p>（只有类信息在方法区中，才能创建对象，使用类中的成员变量）</p><h3 id="_2-jvm-找-main-方法入口" tabindex="-1">2. JVM 找 main() 方法入口 <a class="header-anchor" href="#_2-jvm-找-main-方法入口" aria-label="Permalink to &quot;2. JVM 找 main() 方法入口&quot;">​</a></h3><p>在 main() 方法 入口持有一个指向当前类 (JVMTest) 常量池的指针，常量池中的第一项是一个对 Person 对象的符号引用。</p><p>main 方法中 \`Person p=new Person(&quot;Li Ming&quot;)，JVM 需要创建一个 Person 对象，但是此时方法区中是没有 Person 类信息的，所以 JVM 需要加载 Person 类，将 Person 类的信息加载到方法区中。</p><p>JVM 以一个直接指向方法区 Person 类的指针替换了常量池中第一项的符号引用。</p><h3 id="_3-实例化对象" tabindex="-1">3. 实例化对象 <a class="header-anchor" href="#_3-实例化对象" aria-label="Permalink to &quot;3. 实例化对象&quot;">​</a></h3><p>加载完 Person 类的信息以后，JVM 就会在堆中为一个 Person 实例分配内存，然后调用构造方法初始化 Person 实例，并且该实例<strong>持有指向方法区中的 Person 类的类型信息（其中包括方法表）的引用</strong>。</p><p>（p 为指向该 Person 实例的引用，会被放到栈中）</p><h3 id="_4-运行方法" tabindex="-1">4. 运行方法 <a class="header-anchor" href="#_4-运行方法" aria-label="Permalink to &quot;4. 运行方法&quot;">​</a></h3><p>执行 p.sayHello()，JVM 根据栈中 p 的引用找到 Person 对象，然后根据 Person 对象持有的引用定位到方法区中 Person 类类信息的<strong>方法表</strong>，获得 sayHello 方法的字节码地址，然后开始运行方法。</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/JVM/9bbddeeb-e939-41f0-8e8e-2b1a0aa7e0a7.png" width="700px"></div><h1 id="补充" tabindex="-1">补充 <a class="header-anchor" href="#补充" aria-label="Permalink to &quot;补充&quot;">​</a></h1><ul><li><a href="https://www.cnblogs.com/bingyimeiling/p/10409728.html" target="_blank" rel="noreferrer">main() 方法详解</a></li></ul>`,27),p=[e];function t(h,r,k,d,o,c){return i(),a("div",null,p)}const u=s(l,[["render",t]]);export{g as __pageData,u as default};
