import{_ as e,c as a,o as i,a4 as t}from"./chunks/framework.DpC1ZpOZ.js";const u=JSON.parse('{"title":"Redis 实战——实现简单点赞系统","description":"","frontmatter":{},"headers":[],"relativePath":"java/Redis/9_实战.md","filePath":"java/Redis/9_实战.md","lastUpdated":1728037326000}'),r={name:"java/Redis/9_实战.md"},s=t('<h1 id="redis-实战——实现简单点赞系统" tabindex="-1">Redis 实战——实现简单点赞系统 <a class="header-anchor" href="#redis-实战——实现简单点赞系统" aria-label="Permalink to &quot;Redis 实战——实现简单点赞系统&quot;">​</a></h1><p>该点赞系统功能如下：</p><ul><li>可以发布文章</li><li>可以对文章进行点赞</li><li>在首页可以按文章的发布时间或者文章的点赞数进行排序显示</li></ul><h2 id="文章信息存储" tabindex="-1">文章信息存储 <a class="header-anchor" href="#文章信息存储" aria-label="Permalink to &quot;文章信息存储&quot;">​</a></h2><p>文章包括标题、作者、赞数等信息，在关系型数据库中很容易构建一张表来存储这些信息，在 Redis 中可以使用 HASH 来存储每种信息以及其对应的值的映射。</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/redis/redis_9.png" width="285px"></div><h2 id="点赞功能实现" tabindex="-1">点赞功能实现 <a class="header-anchor" href="#点赞功能实现" aria-label="Permalink to &quot;点赞功能实现&quot;">​</a></h2><p>当有用户为一篇文章点赞时，除了要对该文章的 votes 字段进行加 1 操作，还必须记录该用户已经对该文章进行了点赞，防止用户点赞次数超过 1。可以建立文章的已投票用户集合来进行记录。</p><p>为了节约内存，规定一篇文章发布满一周之后，就不能再对它进行投票，而文章的已投票集合也会被删除，可以为文章的已投票集合设置一个一周的过期时间就能实现这个规定。</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/redis/redis_8.png" width="300px"></div><h2 id="对文章进行排序" tabindex="-1">对文章进行排序 <a class="header-anchor" href="#对文章进行排序" aria-label="Permalink to &quot;对文章进行排序&quot;">​</a></h2><p>为了按发布时间和点赞数进行排序，可以建立一个文章发布时间的有序集合和一个文章点赞数的有序集合。（下图中的 score 就是这里所说的点赞数；下面所示的有序集合分值并不直接是时间和点赞数，而是根据时间和点赞数间接计算出来的）</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/redis/redis_6.png" width="600px"></div><p>115423 号用户给 100408 号文章投票的时候，数据结构发生的变化：</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/redis/redis_7.png" width="600px"></div>',15),d=[s];function o(n,c,h,l,_,p){return i(),a("div",null,d)}const g=e(r,[["render",o]]);export{u as __pageData,g as default};
