import{_ as o,c as e,o as r,a4 as a}from"./chunks/framework.DpC1ZpOZ.js";const _=JSON.parse('{"title":"SpringBoot","description":"","frontmatter":{},"headers":[],"relativePath":"java/SpringBoot/8_SpringBoot.md","filePath":"java/SpringBoot/8_SpringBoot.md","lastUpdated":null}'),t={name:"java/SpringBoot/8_SpringBoot.md"},i=a('<h1 id="springboot" tabindex="-1">SpringBoot <a class="header-anchor" href="#springboot" aria-label="Permalink to &quot;SpringBoot&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>SpringBoot 是由 pivotal 团队开发的全新的Spring 框架，其设计初衷是简化 Spring 应用复杂的搭建和开发过程。该框架提供了一套简单的 Spring 模块依赖和管理工具，从而避免了开发人员处理复杂的模块依赖和版本冲突问题，同事提供打包即可用 Web 服务。</p><p>SpringBoot 特点如下：</p><ul><li>快速创建独立的 Spring 应用程序</li><li>嵌入 Tomcat Web 容器，可快速部署。</li><li>自动配置 JAR 包依赖和版本控制，简化 Maven 配置</li><li>自动装配 Spring 实例，不需要 XML 配置</li><li>提供诸如性能指标、健康检查、外部配置等线上监控和配置功能。</li></ul><h2 id="常用注解" tabindex="-1">常用注解 <a class="header-anchor" href="#常用注解" aria-label="Permalink to &quot;常用注解&quot;">​</a></h2><h3 id="springbootapplication" tabindex="-1">@SpringBootApplication <a class="header-anchor" href="#springbootapplication" aria-label="Permalink to &quot;@SpringBootApplication&quot;">​</a></h3><p>Spring Boot 项目的基石，创建 SpringBoot 项目之后会默认在主类加上。</p><p>@SpringBootApplication 可以认为是 @Configuration 、@EnableAutoConfiguration 和 @ComponentScan 注解的集合。其中</p><ul><li>@EnableAutoConfiguration：启用 SpringBoot 的自动配置机制</li><li>@ComponentScan： 扫描被 @Component / @Service / @Controller 注解的 Bean，注解默认会扫描该类所在的包下所有的类。</li><li>@Configuration：允许在 Spring 上下文中注册额外的 Bean 或导入其他配置类</li></ul><h3 id="value-configurationproperties-propertysource" tabindex="-1">@Value &amp; @ ConfigurationProperties &amp; @PropertySource <a class="header-anchor" href="#value-configurationproperties-propertysource" aria-label="Permalink to &quot;@Value &amp;  @ ConfigurationProperties &amp; @PropertySource&quot;">​</a></h3><p>通过 @Value(&quot;${property}&quot;) 读取比较简单的配置信息；</p><p>通过 @ConfigurationProperties 读取配置信息并与 bean 绑定；</p><p>通过 @PropertySource 读取指定 properties 文件。</p><h3 id="controlleradvice-exceptionhandler" tabindex="-1">@ControllerAdvice &amp; @ExceptionHandler <a class="header-anchor" href="#controlleradvice-exceptionhandler" aria-label="Permalink to &quot;@ControllerAdvice &amp; @ExceptionHandler&quot;">​</a></h3><p>@ControllerAdvice：注解定义全局异常处理类</p><p>@ExceptionHandler：注解声明异常处理方法</p><h2 id="实战" tabindex="-1">实战 <a class="header-anchor" href="#实战" aria-label="Permalink to &quot;实战&quot;">​</a></h2><ul><li><p><a href="https://spring.io/projects/spring-boot/" target="_blank" rel="noreferrer">SpringBoot 官网</a></p></li><li><p><a href="https://snailclimb.gitee.io/springboot-guide/#/" target="_blank" rel="noreferrer">SpringBoot 实战</a></p></li></ul><h1 id="springboot-面试题" tabindex="-1">SpringBoot 面试题 <a class="header-anchor" href="#springboot-面试题" aria-label="Permalink to &quot;SpringBoot 面试题&quot;">​</a></h1><ul><li><p><a href="https://www.cnblogs.com/javaguide/p/springboot-auto-config.html" target="_blank" rel="noreferrer">SpringBoot 自动装配原理</a></p></li><li><p><a href="https://thinkwon.blog.csdn.net/article/details/104397299?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link" target="_blank" rel="noreferrer">Spring Boot面试题（2020最新版）</a></p></li></ul>',21),n=[i];function l(p,c,s,u,g,d){return r(),e("div",null,n)}const S=o(t,[["render",l]]);export{_ as __pageData,S as default};
