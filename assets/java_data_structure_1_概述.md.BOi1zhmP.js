import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.DpC1ZpOZ.js";const g=JSON.parse('{"title":"概述","description":"","frontmatter":{},"headers":[],"relativePath":"java/data_structure/1_概述.md","filePath":"java/data_structure/1_概述.md","lastUpdated":1728037326000}'),l={name:"java/data_structure/1_概述.md"},p=n(`<h1 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h1><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><h3 id="_1-数据" tabindex="-1">1. 数据 <a class="header-anchor" href="#_1-数据" aria-label="Permalink to &quot;1. 数据&quot;">​</a></h3><p>数据是对客观事物的符合表示，在计算机科学中是指所有能输入到计算机中并且被计算机程序处理的符合的总称。例如，整数、实数和字符串都是数据。</p><h3 id="_2-数据元素" tabindex="-1">2. 数据元素 <a class="header-anchor" href="#_2-数据元素" aria-label="Permalink to &quot;2. 数据元素&quot;">​</a></h3><p>数据元素时数据的基本单位，在计算机程序中通常将其作为一个整体进行考虑或处理。一个数据元素可以由若干个数据项组成。</p><h3 id="_3-数据项" tabindex="-1">3. 数据项 <a class="header-anchor" href="#_3-数据项" aria-label="Permalink to &quot;3. 数据项&quot;">​</a></h3><p>数据项是数据结构中讨论的最小单位，是数据记录中最基本的、不可分的数据单位。</p><h3 id="_4-数据对象" tabindex="-1">4. 数据对象 <a class="header-anchor" href="#_4-数据对象" aria-label="Permalink to &quot;4. 数据对象&quot;">​</a></h3><p>数据对象是性质相同的数据元素的集合，是数据的一个子集。</p><h3 id="_5-数据结构" tabindex="-1">5. 数据结构 <a class="header-anchor" href="#_5-数据结构" aria-label="Permalink to &quot;5. 数据结构&quot;">​</a></h3><p>数据结构是指相互之间存在的一种或多种特定关系的数据元素的集合。数据结构包含3方面的内容：逻辑结构、存储结构和对数据的运算。</p><h3 id="_6-数据的逻辑结构" tabindex="-1">6. 数据的逻辑结构 <a class="header-anchor" href="#_6-数据的逻辑结构" aria-label="Permalink to &quot;6. 数据的逻辑结构&quot;">​</a></h3><p>数据的逻辑结构是对数据之间关系的描述，它与数据的存储结构无关，同一种逻辑结构可以有多种存储结构。</p><p>数据的逻辑结构主要有以下两类：</p><p><strong>（1）线性结构</strong></p><p>线性结构是一个数据元素的有序集合，主要有以下四个基本特征：</p><ul><li>集合中必须存在唯一的一个“第一个元素”</li><li>集合中必须存在唯一的一个“最后一个元素”</li><li>除了最后一个元素之外，其它数据元素均有唯一的“后继”</li><li>除了第一个元素之外，其它数据元素均有唯一的“前驱”</li></ul><p>数据结构中线性结构是指数据元素之间存在着“一对一”的线性关系的数据结构。</p><p><strong>（2）非线性结构</strong></p><p>与线性结构不同，非线性结构中结点存在着一对多的关系，它又可以细分为树形结构和图形结构。</p><div align="center"><img src="https://gitee.com/duhouan/ImagePro/raw/master/java-notes/dataStructure/ds_1.png" width="700px"></div><h3 id="_7-数据的物理结构" tabindex="-1">7. 数据的物理结构 <a class="header-anchor" href="#_7-数据的物理结构" aria-label="Permalink to &quot;7. 数据的物理结构&quot;">​</a></h3><p>也就是存储结构，是数据的逻辑结构在计算机中的表示（又称映像）。它包含数据元素的表示和关系的表示。当数据元素时由若干数据项构成的时候，数据项的表示称为数据域。</p><p>数据元素之间的关系在计算机中有两种不同的表示方法：顺序映像和非顺序映像。对应两种不同的存储结构分别是顺序存储结构和链式存储结构。</p><p>在数据结构中有以下四种常用的存储方法：</p><p><strong>（1）顺序存储方法</strong></p><p>逻辑上相邻的两个结点存储在屋里位置上相邻的存储单元中，结点之间的逻辑关系由存储单元的邻接关系来体现。</p><p><strong>（2）链式存储方法</strong></p><p>不要求逻辑上相邻的结点在屋里位置上也相邻，结点间的逻辑关系由附加的指针字段表示。</p><p><strong>（3）索引存储方法</strong></p><p>在存储结点信息时，除建立结点信息外，还建立附加的索引表来标识结点的地址。索引项的一般形式&lt;关键字，地址&gt;。关键字标识唯一一个结点，地址作为指向结点的指针。</p><p><strong>（4）散列存储方法</strong></p><p>根据结点的关键字通过散列函数直接计算出该结点的存储地址。</p><h2 id="算法的基本概念" tabindex="-1">算法的基本概念 <a class="header-anchor" href="#算法的基本概念" aria-label="Permalink to &quot;算法的基本概念&quot;">​</a></h2><h3 id="_1-算法" tabindex="-1">1. 算法 <a class="header-anchor" href="#_1-算法" aria-label="Permalink to &quot;1. 算法&quot;">​</a></h3><p>算法可以理解为由基本运算及规定的运算顺序所组成的完整的解题步骤，或者是看成按照要求设计好的有限的确切的计算序列。</p><h3 id="_2-算法的特性" tabindex="-1">2. 算法的特性 <a class="header-anchor" href="#_2-算法的特性" aria-label="Permalink to &quot;2. 算法的特性&quot;">​</a></h3><ul><li>有穷性：必须保证执行有限步之后结束</li><li>确定性：每一步必须有确定的定义</li><li>输入：有0个或多个输入</li><li>输出：有一个或多个输出</li><li>可行性：所有操作必须可以通过已经实现的基本操作进行运算</li></ul><h3 id="_3-算法的设计目标" tabindex="-1">3. 算法的设计目标 <a class="header-anchor" href="#_3-算法的设计目标" aria-label="Permalink to &quot;3. 算法的设计目标&quot;">​</a></h3><ul><li>正确性</li><li>可读性</li><li>健壮性</li><li>算法效率</li></ul><h2 id="算法时间复杂度分析" tabindex="-1">算法时间复杂度分析 <a class="header-anchor" href="#算法时间复杂度分析" aria-label="Permalink to &quot;算法时间复杂度分析&quot;">​</a></h2><p><strong>将算法中基本操作的执行次数作为算法时间复杂度的度量</strong>。</p><p>n：表示数据规模；</p><p>O(f(n))：表示运行算法所要执行的指令数，和 f(n) 成正比；</p><p>常见的各种复杂度的大小，常用的比较关系：</p><p>O(n) &lt;= O(log(n)) &lt;= O(n) &lt;= O(nlog(n)) &lt;= O(n<sup>2</sup>)&lt;=O(n<sup>3</sup>)&lt;=O(n<sup>k</sup>)&lt;=O(2<sup>k</sup>)</p><p>计算一个算法的时间复杂度的具体步骤如下：</p><p>（1）确定算法中的基本操作以及问题的规模</p><p>（2）根据基本操作执行情况计算出规模 n 的函数 f(n)，确定时间复杂度</p><p>基本操作：即其重复执行次数和算法的执行时间成正比的操作。通俗地说，这种操作组成了算法，当它们都执行的时候算法也就结束了，<strong>大多数情况下取最深层循环内的语句所描述的操作为基本操作</strong>。</p><h3 id="示例-1" tabindex="-1">示例 1 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例 1&quot;">​</a></h3><ul><li>代码</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">j;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>分析</li></ul><p>（1）确定算法中的基本操作以及问题的规模：</p><ul><li>基本操作显然是 ++j 和 i+=2</li><li>问题规模，由循环条件 i&lt;n 可以知道，为 n</li></ul><p>（2）计算出 n 的函数 f(n)：</p><p>假设 i 自增经过 m 次后循环结束，则 i 的最终值为 1+2m ，取一个常数 K，用来进行修正，即</p><p>1+2m+K=n （因为 1+2m 不一定刚好等于 n，所以使用一个常数 K 进行修正）。</p><p>则 m=(n-1-K)/2 ，f(n)=(n-1-K)/2 （其中，K为常数）。</p><p>因此时间复杂度为 O(n)。</p><h3 id="示例-2" tabindex="-1">示例 2 <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例 2&quot;">​</a></h3><ul><li>代码</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i,j,x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n;j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>分析</li></ul><p>（1）确定算法中的基本操作以及问题的规模：</p><ul><li>基本操作显然是 ++x</li><li>问题规模，由循环条件 i&lt;n 可以知道，为 n</li></ul><p>（2）计算出 n 的函数 f(n)：</p><p>i=1 时，++x 执行(n-1) 次</p><p>i=2 时，++x 执行(n-2) 次</p><p>...</p><p>i=(n-1) 时，++x 执行 1 次</p><p>f(n)=(n-1)+(n-2)+...+1 = n(n-1)/2。</p><p>时间复杂度为 O(n^2)。</p><h3 id="示例-3" tabindex="-1">示例 3 <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;示例 3&quot;">​</a></h3><ul><li>代码</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>分析</li></ul><p>（1）确定算法中的基本操作以及问题的规模：</p><ul><li>基本操作显然是 ++i 和 s=s+i;</li><li>问题规模，由循环条件 s&lt;n 可以知道，为 n</li></ul><p>（2）计算出 n 的函数 f(n)：</p><p>假设循环执行 m 次结束：</p><p>m=1 时，s=0+1=1;</p><p>m=2 时，s=(1)+2=3;</p><p>m=3 时，s=(1+2)+3=6;</p><p>...</p><p>则 m=m时，s=m(m+1)/2</p><p>则有 m(m+1)/2 +K = n （因为 m(m+1)/2 不一定刚好等于 n，所以使用一个常数 K 进行修正）。</p><p>由求根公式计算</p><p>m =(-1+sqet(8n+1-8K))/2</p><p>时间复杂度为 O(sqrt(n))。</p><h2 id="算法空间复杂度分析" tabindex="-1">算法空间复杂度分析 <a class="header-anchor" href="#算法空间复杂度分析" aria-label="Permalink to &quot;算法空间复杂度分析&quot;">​</a></h2><p>算法的空间复杂度指算法在运行时所需存储空间的度量，主要考虑在算法运行过程中临时占用的存储空间的大小。</p><p>算法<strong>原地工作</strong>是指算法所需辅助空间是常量，即 O(1)。</p>`,95),h=[p];function t(e,r,k,d,E,o){return a(),i("div",null,h)}const u=s(l,[["render",t]]);export{g as __pageData,u as default};
