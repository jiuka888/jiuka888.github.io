import{_ as a,c as t,o as i,a4 as p}from"./chunks/framework.DpC1ZpOZ.js";const M=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"java/Kafka&RabbitMQ/Kafka_RabbitMQ.md","filePath":"java/Kafka&RabbitMQ/Kafka_RabbitMQ.md","lastUpdated":1728037326000}'),b={name:"java/Kafka&RabbitMQ/Kafka_RabbitMQ.md"},e=p('<h2 id="kafka-和-rabbitmq-比较" tabindex="-1">Kafka 和 RabbitMQ 比较 <a class="header-anchor" href="#kafka-和-rabbitmq-比较" aria-label="Permalink to &quot;Kafka 和 RabbitMQ 比较&quot;">​</a></h2><p>从以下几个方面比较 Kafka 和 RabbitMQ：</p><ul><li><p>吞吐量</p><p>Kafka：十万数量级，高吞吐量</p><p>RabbitMQ：万数量级</p></li><li><p>Topic 数量对吞吐量影响</p><p>Kafka 的 Topic 可达百/千级，吞吐量下降幅度小，在同等机器下，可以支撑大量的 Topic。</p><p>RabbitMQ 无 Topic 概念。</p></li><li><p>时效性</p><p>Kafka 毫秒级；RabbitMQ 微秒级</p></li><li><p>可用性</p><p>Kafka 基于分布式架构，可用性非常高</p><p>RabbitMQ 基于主从架构实现高可用</p></li><li><p>可靠性</p><p>Kafka 优化参数配置，可以做到零丢失</p><p>RabbitMQ 基本不会丢失数据</p></li><li><p>功能</p><p>Kafka 功能较为简单，主要支持简单的消息队列功能，在大数据领域的实时计算以及日志采集被大规模使用</p><p>RabbitMQ 基于 ErLang 开发，并发能力很强，性能极好，延时很低</p></li></ul><p>总结：</p><ul><li>Kafka 主要特点是基于 Pull 的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输。0.8 版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，<strong>适合产生大量数据的互联网服务的数据收集业务</strong>。</li><li>RabbitMQ 是使用 Erlang 语言开发的开源消息队列系统，基于 AMQP 协议来实现。AMQP 的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。AMQP 协议更多用在企业系统内，<strong>对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次</strong>。</li></ul>',5),l=[e];function o(r,_,f,s,n,c){return i(),t("div",null,l)}const Q=a(b,[["render",o]]);export{M as __pageData,Q as default};
