import{_ as e,c as a,o as i,a4 as o}from"./chunks/framework.DpC1ZpOZ.js";const k=JSON.parse('{"title":"分布式锁","description":"","frontmatter":{},"headers":[],"relativePath":"java/distribution/3_分布式锁.md","filePath":"java/distribution/3_分布式锁.md","lastUpdated":1728037326000}'),l={name:"java/distribution/3_分布式锁.md"},r=o('<h1 id="分布式锁" tabindex="-1">分布式锁 <a class="header-anchor" href="#分布式锁" aria-label="Permalink to &quot;分布式锁&quot;">​</a></h1><p>在单机场景下，可以使用语言的内置锁来实现进程同步。但是在分布式场景下，需要同步的进程可能位于不同的节点上，那么就需要使用分布式锁。</p><p>分布式锁的实现方式：</p><ul><li>数据库的唯一索引</li><li>Redis 的 SETNX 指令</li><li>Redis 的 RedLock 算法</li><li>基于 Zookeeper 实现分布式锁</li></ul><h2 id="数据库的唯一索引" tabindex="-1">数据库的唯一索引 <a class="header-anchor" href="#数据库的唯一索引" aria-label="Permalink to &quot;数据库的唯一索引&quot;">​</a></h2><p>获得锁时向表中插入一条记录，释放锁时删除这条记录。唯一索引可以保证该记录只被插入一次，那么就可以用这个记录是否存在来判断是否存于锁定状态。</p><p>存在以下几个问题：</p><ul><li>锁没有失效时间，解锁失败的话其它进程无法再获得该锁。</li><li>只能是非阻塞锁，插入失败直接就报错了，无法重试。</li><li>不可重入，已经获得锁的进程也必须重新获取锁。</li></ul><h2 id="redis-的-setnx-指令" tabindex="-1">Redis 的 SETNX 指令 <a class="header-anchor" href="#redis-的-setnx-指令" aria-label="Permalink to &quot;Redis 的 SETNX 指令&quot;">​</a></h2><p>使用 SETNX（set if not exist）指令插入一个键值对，如果 Key 已经存在，那么会返回 False，否则插入成功并返回 True。</p><p>SETNX 指令和数据库的唯一索引类似，保证了只存在一个 Key 的键值对，那么可以用一个 Key 的键值对是否存在来判断是否存于锁定状态。</p><p>EXPIRE 指令可以为一个键值对设置一个过期时间，从而避免了数据库唯一索引实现方式中释放锁失败的问题。</p><h2 id="redis-的-redlock-算法" tabindex="-1">Redis 的 RedLock 算法 <a class="header-anchor" href="#redis-的-redlock-算法" aria-label="Permalink to &quot;Redis 的 RedLock 算法&quot;">​</a></h2><p>使用了多个 Redis 实例来实现分布式锁，这是为了保证在发生单点故障时仍然可用。</p><ul><li>尝试从 N 个相互独立 Redis 实例获取锁；</li><li>计算获取锁消耗的时间，只有当这个时间小于锁的过期时间，并且从大多数（N / 2 + 1）实例上获取了锁，那么就认为锁获取成功了；</li><li>如果锁获取失败，就到每个实例上释放锁。</li></ul><h2 id="基于-zookeeper-实现分布式锁" tabindex="-1">基于 Zookeeper 实现分布式锁 <a class="header-anchor" href="#基于-zookeeper-实现分布式锁" aria-label="Permalink to &quot;基于 Zookeeper 实现分布式锁&quot;">​</a></h2><p>为了保证高可用，Zookeeper 需要以集群形态来部署，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 Zookeeper 本身仍然是可用的。</p><p>客户端在使用 Zookeeper 时，需要知道集群<strong>机器列表</strong>，通过与集群中的某一台机器建立 TCP 连接来使用服务，客户端使用这个 TCP 连接来发送请求、获取结果、获取监听事件以及发送心跳。如果这个连接断开了，客户端可以连接到另外的机器上。</p><p>架构图如下：</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/java-notes/distribution/cap_2.png" width="550"></div><p>客户端的<strong>读请求可以被集群中的任意一台机器处理</strong>，如果读请求在节点上注册了监听器，这个监听器也是由所连接的 Zookeeper 机器来处理。<strong>写请求会同时发给其他 Zookeeper 机器并且达成一致后，请求才会成功</strong>。</p><p>因此，随着 Zookeeper 的集群机器增多，读请求的吞吐量会提高，但写请求的吞吐量会下降。</p><h3 id="_1-zookeeper-抽象模型" tabindex="-1">1. Zookeeper 抽象模型 <a class="header-anchor" href="#_1-zookeeper-抽象模型" aria-label="Permalink to &quot;1. Zookeeper 抽象模型&quot;">​</a></h3><p>Zookeeper 提供了一种树形结构级的命名空间，/app1/p_1 节点的父节点为 /app1。</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/java-notes/systemDesign/31d99967-1171-448e-8531-bccf5c14cffe.jpg" width="400"></div><br><h3 id="_2-节点类型" tabindex="-1">2. 节点类型 <a class="header-anchor" href="#_2-节点类型" aria-label="Permalink to &quot;2. 节点类型&quot;">​</a></h3><ul><li>永久节点：不会因为会话结束或者超时而消失；</li><li>临时节点：如果会话结束或者超时就会消失；</li><li>有序节点：会在节点名的后面加一个数字后缀，并且是有序的，例如生成的有序节点为 /lock/node-0000000000，它的下一个有序节点则为 /lock/node-0000000001，以此类推。</li></ul><h3 id="_3-监听器" tabindex="-1">3. 监听器 <a class="header-anchor" href="#_3-监听器" aria-label="Permalink to &quot;3. 监听器&quot;">​</a></h3><p>为一个节点注册监听器，在节点状态发生改变时，会给客户端发送消息。当前 Zookeeper 有如下 4 种事件：</p><ul><li>节点创建</li><li>节点删除</li><li>节点数据修改</li><li>子节点变更</li></ul><h3 id="_4-分布式锁实现" tabindex="-1">4. 分布式锁实现 <a class="header-anchor" href="#_4-分布式锁实现" aria-label="Permalink to &quot;4. 分布式锁实现&quot;">​</a></h3><ul><li>创建一个锁目录 /lock；</li><li>当一个客户端需要获取锁时，在 /lock 下创建临时的且有序的子节点；</li><li>客户端获取 /lock 下的子节点列表，判断自己创建的子节点是否为当前子节点列表中序号最小的子节点，如果是则认为获得锁；否则<strong>监听 /lock 子节点</strong>，获得子节点的变更通知后重复此步骤直至获得锁；</li><li>执行业务代码，完成后，删除对应的子节点。</li></ul><h3 id="_5-会话超时" tabindex="-1">5. 会话超时 <a class="header-anchor" href="#_5-会话超时" aria-label="Permalink to &quot;5. 会话超时&quot;">​</a></h3><p>如果一个已经获得锁的会话超时了，因为创建的是临时节点，所以该会话对应的临时节点会被删除，其它会话就可以获得锁了。可以看到，Zookeeper 分布式锁不会出现数据库的唯一索引实现的分布式锁释放锁失败问题。</p><h3 id="_6-羊群效应" tabindex="-1">6. 羊群效应 <a class="header-anchor" href="#_6-羊群效应" aria-label="Permalink to &quot;6. 羊群效应&quot;">​</a></h3><p>一个节点未获得锁，只需要监听自己的前一个子节点，这是因为如果监听所有的子节点，那么任意一个子节点状态改变，其它所有子节点都会收到通知（羊群效应），而我们只希望它的后一个子节点收到通知。</p><h3 id="_7-调整后的分布式锁实现" tabindex="-1">7. 调整后的分布式锁实现 <a class="header-anchor" href="#_7-调整后的分布式锁实现" aria-label="Permalink to &quot;7. 调整后的分布式锁实现&quot;">​</a></h3><ul><li>创建一个锁目录 /lock；</li><li>当一个客户端需要获取锁时，在 /lock 下创建临时的且有序的子节点；</li><li>客户端获取 /lock 下的子节点列表，判断自己创建的子节点是否为当前子节点列表中序号最小的子节点，如果是则认为获得锁；否则<strong>监听自己的前一个子节点</strong>，获得子节点的变更通知后重复此步骤直至获得锁；</li><li>执行业务代码，完成后，删除对应的子节点。</li></ul>',39),t=[r];function s(n,d,p,h,c,u){return i(),a("div",null,t)}const b=e(l,[["render",s]]);export{k as __pageData,b as default};
