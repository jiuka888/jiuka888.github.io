import{_ as a,c as e,o as t,a4 as i}from"./chunks/framework.DpC1ZpOZ.js";const m=JSON.parse('{"title":"Java容器概览","description":"","frontmatter":{},"headers":[],"relativePath":"java/JavaContainer/1_容器概览.md","filePath":"java/JavaContainer/1_容器概览.md","lastUpdated":1728037326000}'),r={name:"java/JavaContainer/1_容器概览.md"},o=i('<h1 id="java容器概览" tabindex="-1">Java容器概览 <a class="header-anchor" href="#java容器概览" aria-label="Permalink to &quot;Java容器概览&quot;">​</a></h1><p>容器主要包括 Collection 和 Map 两种，Collection 存储着对象的集合，而 Map 存储着键值对（两个对象）的映射表。</p><h2 id="collection" tabindex="-1">Collection <a class="header-anchor" href="#collection" aria-label="Permalink to &quot;Collection&quot;">​</a></h2><p>Collection 集合体系图：</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/java-notes/java/VP6n3i8W48Ptde8NQ9_0eSR5eOD6uqx.png"></div><h3 id="_1-set" tabindex="-1">1. Set <a class="header-anchor" href="#_1-set" aria-label="Permalink to &quot;1. Set&quot;">​</a></h3><ul><li><p>TreeSet：基于<strong>红黑树</strong>实现，支持有序性操作，例如根据一个范围查找元素的操作。 但是查找效率不如 HashSet，HashSet 查找的时间复杂度为 O(1)，TreeSet 则为 O(logN)。</p></li><li><p>HashSet：基于哈希表实现，支持快速查找，但不支持有序性操作。 并且失去了元素的插入顺序信息，也就是说使用 Iterator 遍历 HashSet 得到的结果是不确定的。</p></li><li><p>LinkedHashSet：具有 HashSet 的查找效率，且内部使用双向链表维护元素的插入顺序。</p></li></ul><h3 id="_2-list" tabindex="-1">2. List <a class="header-anchor" href="#_2-list" aria-label="Permalink to &quot;2. List&quot;">​</a></h3><ul><li><p>ArrayList：基于动态数组实现，支持随机访问。</p></li><li><p>Vector：和 ArrayList 类似，但它是<strong>线程安全</strong>的。</p></li><li><p>LinkedList：基于双向链表实现，只能顺序访问，但是可以快速地在链表中间插入和删除元素。 不仅如此，LinkedList 还可以用作栈、队列和双向队列。</p></li></ul><h3 id="_3-queue" tabindex="-1">3. Queue <a class="header-anchor" href="#_3-queue" aria-label="Permalink to &quot;3. Queue&quot;">​</a></h3><ul><li><p>LinkedList：可以用它来实现双向队列。</p></li><li><p>PriorityQueue：基于堆结构实现，可以用它来实现优先队列。</p></li></ul><h2 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h2><p>Map 集合体系图：</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/java-notes/java/SoWkIImgAStDuUBAp2j9BKfBJ4vLy4q.png"></div><ul><li><p>TreeMap：基于红黑树实现。</p></li><li><p>HashMap：基于哈希表实现。</p></li><li><p>HashTable：和 HashMap 类似，但它是<strong>线程安全</strong>的， 这意味着同一时刻多个线程可以同时写入 HashTable 并且不会导致数据不一致。 它是遗留类，不应该去使用它。现在可以使用 ConcurrentHashMap 来支持线程安全， 并且 ConcurrentHashMap 的效率会更高，因为 ConcurrentHashMap 引入了分段锁。</p></li><li><p>LinkedHashMap：使用<strong>双向链表</strong>来维护元素的顺序，顺序为<strong>插入顺序</strong>或者<strong>最近最少使用（LRU）顺序</strong>。</p></li></ul>',15),l=[o];function n(s,p,h,c,u,d){return t(),e("div",null,l)}const g=a(r,[["render",n]]);export{m as __pageData,g as default};
