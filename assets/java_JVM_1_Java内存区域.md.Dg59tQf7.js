import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.DpC1ZpOZ.js";const u=JSON.parse('{"title":"Java 运行数数据区域","description":"","frontmatter":{},"headers":[],"relativePath":"java/JVM/1_Java内存区域.md","filePath":"java/JVM/1_Java内存区域.md","lastUpdated":1728037326000}'),l={name:"java/JVM/1_Java内存区域.md"},t=n(`<h1 id="java-运行数数据区域" tabindex="-1">Java 运行数数据区域 <a class="header-anchor" href="#java-运行数数据区域" aria-label="Permalink to &quot;Java 运行数数据区域&quot;">​</a></h1><p>Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。</p><p>JDK 1.8 和之前的版本略有不同：</p><ul><li>JDK 1.7 之前<strong>运行时常量池</strong>逻辑包含<strong>字符串常量池</strong>存放在方法区</li><li>JDK 1.7 字符串常量池被从方法区中拿到了堆，运行时常量池剩下的内容还在方法区</li><li>JDK1.8 HotSpot 虚拟机<strong>移除了永久代</strong>，采用<strong>元空间(Metaspace)</strong> 代替方法区，这时候<strong>字符串常量池还在堆</strong>，运行时常量池还在方法区，只不过方法区的实现从永久代变成了元空间。</li></ul><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/JVM/5778d113-8e13-4c53-b5bf-801e58080b97.png"></div><h2 id="程序计数器" tabindex="-1">程序计数器 <a class="header-anchor" href="#程序计数器" aria-label="Permalink to &quot;程序计数器&quot;">​</a></h2><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的<strong>行号指示器（逻辑上）</strong>。主要有以下两个作用：</p><ul><li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。</li><li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。</li></ul><p>此外，程序计数器还有如下特性：</p><ul><li>通过改变计数器的值来选取下一条需要执行的字节码指令</li><li>和线程一对一的关系，即“线程私有”</li><li>对 Java 方法计数，如果是 Native 方法则计数器值为 Undefined</li><li>只是计数，不会发生内存泄漏，生命周期随着线程的创建而创建，随着线程的结束而死亡。</li></ul><h2 id="java-虚拟机栈" tabindex="-1">Java 虚拟机栈 <a class="header-anchor" href="#java-虚拟机栈" aria-label="Permalink to &quot;Java 虚拟机栈&quot;">​</a></h2><p>每个 Java 方法在执行的同时会创建一个栈帧用于存储<strong>局部变量表</strong>、<strong>操作数栈</strong>、动态链接、方法出口信息等。</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/JVM/8442519f-0b4d-48f4-8229-56f984363c69.png" width="300px"></div><p>从方法调用直至执行完成的过程，就对应着<strong>一个栈帧在 Java 虚拟机栈中入栈和出栈的过程</strong>。Java 方法有两种返回方式：</p><ul><li>return 语句</li><li>抛出异常</li></ul><p>不管使用哪种返回方式都会导致栈帧被弹出。</p><p>可以通过 -Xss 这个虚拟机参数来指定每个线程的 Java 虚拟机栈内存大小：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">java </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xss512M HackTheJava</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>该区域可能抛出以下异常：</p><ul><li>当线程请求的栈深度超过最大值，会抛出 StackOverflowError 异常；</li><li>栈进行动态扩展时如果无法申请到足够内存，会抛出 OutOfMemoryError 异常。</li></ul><p>注意：<strong>HotSpot 虚拟机的栈容量不可以进行动态扩展的</strong>，所以在 HotSpot 虚拟机是不会由于虚拟机栈无法扩展而导致 OOM 的，但是如果申请时就失败，仍然会出现 OOM 异常。</p><h3 id="局部变量表" tabindex="-1">局部变量表 <a class="header-anchor" href="#局部变量表" aria-label="Permalink to &quot;局部变量表&quot;">​</a></h3><p>局部变量表主要存放了编译期可知的各种数据类型（boolean、byte、char、short、int、float、long、double）和对象引用。</p><h3 id="操作数栈" tabindex="-1">操作数栈 <a class="header-anchor" href="#操作数栈" aria-label="Permalink to &quot;操作数栈&quot;">​</a></h3><ul><li>局部变量表：包含方法执行过程中的所有变量</li><li>操作数栈：入栈、出栈、复制、交换、产生消费变量</li></ul><p>通过 javap 命令分析 Java 汇编指令，感受操作数栈和局部变量表的关系。</p><p>定义测试类：该类中定义了一个静态方法 add()</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JVMTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>使用 javap 命令（javap 分析的是字节码文件）</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">javap -verbose JVMTest</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>得到如下汇编指令：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  public static int add(int, int);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    descriptor: (II)I</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    flags: ACC_PUBLIC, ACC_STATIC</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Code:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      stack=2, locals=3, args_size=2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         0: iconst_0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         1: istore_2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         2: iload_0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         3: iload_1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         4: iadd</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         5: istore_2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         6: iload_2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         7: ireturn</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      LineNumberTable:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        line 5: 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        line 6: 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        line 7: 6</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>解读上述指令：</p><ul><li>stack = 2 说明栈的深度是 2 ；</li><li>locals = 3 说明有 3 个本地变量 ；</li><li>args_size = 2 说明该方法需传入 2 个参数</li><li>load 指令表示入操作数栈，store 表示出操作数栈</li></ul><p>执行 add(1,2)，说明局部变量表和操作数栈的关系：</p><ul><li>首先会将栈帧按照程序计数器指令从大到小依次入栈，栈帧按照程序计数器指令依次出栈。</li><li>数据 1、2 是入参，已经存在局部变量表 0、1 位置</li><li>首先执行 iconst_0，将数据 0 push 进操作数栈</li><li>执行 istore_2，将数据 0 pop出操作数栈并放入局部变量表中 2 位置</li><li>执行 iload_0，将 0 位置元素（数值 1） push 进操作数栈</li><li>执行 iload_1，将 1 位置元素（数值 2） push 进操作数栈</li><li>执行 iadd，将数值1和数值2元素 pop出操作数栈，执行加法运算后，得到结果3，将 3 push 进操作数栈</li><li>执行 istore_2，将数据 3 pop出操作数栈并放入局部变量表中 2 位置</li><li>执行 iload_2，将 2 位置元素（数值 3）push 进操作数栈</li><li>执行 ireturn，返回操作数栈栈顶元素</li></ul><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/JVM/j_2.png"></div><h2 id="本地方法栈" tabindex="-1">本地方法栈 <a class="header-anchor" href="#本地方法栈" aria-label="Permalink to &quot;本地方法栈&quot;">​</a></h2><p>本地方法栈与 Java 虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。</p><p>本地方法一般是用其它语言（C、C++ 或汇编语言等）编写的，并且被编译为基于本机硬件和操作系统的程序，对待这些方法需要特别处理。</p><p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p><p>方法执行完毕后相应的栈帧也会出栈并释放内存空间，也会出现 StackOverFlowError 和 OutOfMemoryError 。</p><h2 id="堆" tabindex="-1">堆 <a class="header-anchor" href="#堆" aria-label="Permalink to &quot;堆&quot;">​</a></h2><p>几乎所有的对象实例以及数组都在这里分配内存，是垃圾收集的主要区域，所以也被称作 <strong>GC 堆(Garbage Collected Heap)</strong>。</p><p>现代的垃圾收集器基本都是<strong>采用分代收集算法</strong>，其主要的思想是针对不同类型的对象采取不同的垃圾回收算法。可以将堆分成两块：</p><ul><li>新生代 (Young Generation)，新生代可以划分为 Eden 、From Survivor、To Survivor 空间</li><li>老年代 (Old Generation)</li></ul><p>堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出 OutOfMemoryError 异常。</p><p>可以通过 -Xms 和 -Xmx 这两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">java </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xms1M </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xmx2M HackTheJava</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>JDK 7 版本及 JDK 7 版本之前，Hotspot 虚拟机的堆结构如下：</p><ul><li>新生代 (Young Generation)</li><li>老年代 (Old Generation)</li><li>永久代 (Permanent Generation)</li></ul><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/JVM/4cf711a8-7ab2-4152-b85c-d5c226733807.png"></div><p>JDK 8 版本之后 HotSpot 虚拟机的永久代被彻底移除了，取而代之是元空间，元空间使用的是直接内存。</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/JVM/66a6899d-c6b0-4a47-8569-9d08f0baf86c.png" width="412px"></div><h2 id="堆和栈的关系" tabindex="-1">堆和栈的关系 <a class="header-anchor" href="#堆和栈的关系" aria-label="Permalink to &quot;堆和栈的关系&quot;">​</a></h2><p>Java 内存可以粗糙的区分为堆内存（Heap）和栈内存 (Stack)，其中<strong>栈就是现在说的虚拟机栈</strong>，或者说是虚拟机栈中局部变量表部分。引用对象、数组时，栈里定义变量保存堆中目标的首地址。</p><p>栈和堆的区别：</p><ul><li><p>物理地址</p><p>堆的物理内存分配是不连续的；</p><p>栈的物理内存分配是连续的</p></li><li><p>分配内存</p><p>堆是不连续的，分配的内存是在运行期确定的，大小不固定；</p><p>栈是连续的，分配的内存在编译器就已经确定，大小固定</p></li><li><p>存放内容</p><p>堆中存放的是对象和数组，关注的是数据的存储；</p><p>栈中存放局部变量，关注的是程序方法的执行</p></li><li><p>是否线程私有</p><p>堆内存中的对象对所有线程可见，可被所有线程访问；</p><p>栈内存属于某个线程私有的</p></li><li><p>异常</p><p>栈扩展失败，会抛出 StackOverflowError；</p><p>堆内存不足，会抛出 OutOfMemoryError</p></li></ul><h2 id="方法区" tabindex="-1">方法区 <a class="header-anchor" href="#方法区" aria-label="Permalink to &quot;方法区&quot;">​</a></h2><p>用于存放已被加载的<strong>类信息</strong>、<strong>常量</strong>、<strong>静态变量</strong>、<strong>即时编译器编译后的代码</strong>等数据。</p><p>和堆一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出 OutOfMemoryError 异常。</p><p>对这块区域进行垃圾回收的主要目标是对常量池的回收和对类的卸载，但是一般比较难实现。</p><p>HotSpot 虚拟机把它当成永久代来进行垃圾回收。但很难确定永久代的大小，因为它受到很多因素影响，并且每次 Full GC 之后永久代的大小都会改变，所以经常会抛出 OutOfMemoryError 异常。为了更容易管理方法区，从 JDK 1.8 开始，移除永久代，并把方法区移至元空间，它位于本地内存中，而不是虚拟机内存中。</p><h3 id="方法区与永久代" tabindex="-1">方法区与永久代 <a class="header-anchor" href="#方法区与永久代" aria-label="Permalink to &quot;方法区与永久代&quot;">​</a></h3><p><strong>方法区只是一个 JVM 规范</strong>，在不同的 JVM 上方法区的实现可能是不同的。</p><p>方法区和永久代的关系类似 Java 中接口和类的关系，类实现了接口，<strong>永久代就是 HotSpot 虚拟机对 JVM 规范中方法区的一种实现方式</strong>。</p><p>方法区是 JVM 规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚拟机实现并没有永久代这一说法。</p><h3 id="元空间与永久代" tabindex="-1">元空间与永久代 <a class="header-anchor" href="#元空间与永久代" aria-label="Permalink to &quot;元空间与永久代&quot;">​</a></h3><p><strong>方法区只是一个 JVM 规范，永久代与元空间都是其一种实现方式</strong>。在 JDK 1.8 之后，原来永久代的数据被分到了堆和元空间中：<strong>元空间存储类的元信息，静态变量和常量池等则放入堆中</strong>。</p><p>元空间与永久代的最大区别在于：元空间使用本地内存，而永久代使用 JVM 的内存，元空间相比永久代具有如下优势：</p><ul><li>永久代存在一个 JVM 本身设置的固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，虽然元空间仍旧可能溢出，但是比原来出现的几率会更小。当元空间溢出时会得到如下错误： <code>java.lang.OutOfMemoryError: MetaSpace</code> 可以使用 <code>-XX：MaxMetaspaceSize</code> 标志设置最大元空间大小，默认值为 unlimited，这意味着它只受系统内存的限制。</li><li>元空间里面存放的是类的元数据，这样加载多少类的元数据就不由 <code>MaxPermSize</code> 控制了, 而由系统的实际可用空间来控制，可以加载更多的类。</li></ul><h2 id="运行时常量池" tabindex="-1">运行时常量池 <a class="header-anchor" href="#运行时常量池" aria-label="Permalink to &quot;运行时常量池&quot;">​</a></h2><p>运行时常量池是方法区的一部分。</p><p>Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池表（用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中）。</p><p>运行时常量池相对于 Class 文件常量池的另外一个重要特征是具备动态性，Java 语言并不要求常量 一定只有编译期才能产生，运行期间也可以将新的常量放入池中，例如 String 类的 intern()。</p><h2 id="字符串常量池" tabindex="-1">字符串常量池 <a class="header-anchor" href="#字符串常量池" aria-label="Permalink to &quot;字符串常量池&quot;">​</a></h2><p>JDK 1.7 之前<strong>运行时常量池</strong>逻辑包含<strong>字符串常量池</strong>存放在方法区。</p><p>JDK 1.7 <strong>字符串常量池被单独拿到堆</strong>，运行时常量池剩下的内容还在方法区。</p><p>JDK1.8 HotSpot 虚拟机<strong>移除了永久代</strong>，采用<strong>元空间(Metaspace)</strong> 代替方法区，这时候<strong>字符串常量池还在堆</strong>，运行时常量池还在方法区，只不过方法区的实现从永久代变成了元空间。</p><h3 id="string-对象创建方式" tabindex="-1">String 对象创建方式 <a class="header-anchor" href="#string-对象创建方式" aria-label="Permalink to &quot;String 对象创建方式&quot;">​</a></h3><p>创建方式 1：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abcd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>创建方式 2：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abcd&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这两种不同的创建方法是有差别的:</p><p>方式 1 是在<strong>常量池</strong>中获取对象（&quot;abcd&quot; 属于字符串字面量，因此编译时期会在常量池中创建一个字符串对象）。</p><p>方式 2 会创建两个字符串对象（前提是常量池中还没有 &quot;abcd&quot; 字符串对象）：</p><ul><li>&quot;abcd&quot; 属于字符串字面量，因此编译时期会在常量池中创建一个字符串对象，该字符串对象指向这个 &quot;abcd&quot; 字符串字面量；</li><li>使用 new 的方式会在堆中创建一个字符串对象。</li></ul><p>(<strong>字符串常量&quot;abcd&quot;在编译期</strong>就已经确定放入常量池，而 Java <strong>堆上的&quot;abcd&quot;是在运行期</strong>初始化阶段才确定)。</p><p><strong>str1 指向常量池中的 “abcd” 对象，而 str2 指向堆中的字符串对象。</strong></p><h3 id="string-的-intern-方法" tabindex="-1">String 的 intern() 方法 <a class="header-anchor" href="#string-的-intern-方法" aria-label="Permalink to &quot;String 的 intern() 方法&quot;">​</a></h3><p>String 的 intern() 是一个 <strong>Native 方法</strong>，当调用 intern() 方法时：</p><ul><li>如果运行时常量池中已经包含一个等于该 String 对象内容的字符串，则返回常量池中该字符串的引用。</li><li>如果没有等于该 String 对象的字符串，JDK1.7 之前（不包含 1.7）是在常量池中创建与此 String 内容相同的字符串，并返回常量池中创建的字符串的引用，<strong>JDK1.7 以及之后的处理方式是对于存在堆中的对象，在常量池中直接保存对象的引用，而不会重新创建对象。</strong></li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s3.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">intern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String s4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;11&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s4);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>JDK 6 输出结果：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>JDK 8 输出结果：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>补充：<a href="https://www.cnblogs.com/wxgblogs/p/5635099.html" target="_blank" rel="noreferrer">String 的 intern() 方法详解</a></p><h3 id="字符串拼接问题" tabindex="-1">字符串拼接问题 <a class="header-anchor" href="#字符串拼接问题" aria-label="Permalink to &quot;字符串拼接问题&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//常量池中的对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str2; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在堆上创建的新的对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String str5 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;helloworld&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//常量池中的对象</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str4);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str5);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str5);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>输出结果如下：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>str1、str2 是从字符串常量池中获取的对象。</p><p>对于 str3，字符串 &quot;hello&quot; 和字符串 &quot;world&quot; 相加有后得到 &quot;helloworld&quot;，在字符串常量池中创建 &quot;helloworld&quot; 对象。</p><p>对于 str4，str1+str2 则会在堆中创建新的 &quot;helloworld&quot; 对象。</p><p>对于 str5，字符串常量池已有 &quot;helloworld&quot; 对象，str5 直接引用该对象。</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/JVM/j_3.png"></div><p>所以，尽量避免多个字符串拼接，因为这样会重新创建新的对象。如果需要改变字符串的话，可以使用 StringBuilder 或者 StringBuffer。</p><h2 id="直接内存" tabindex="-1">直接内存 <a class="header-anchor" href="#直接内存" aria-label="Permalink to &quot;直接内存&quot;">​</a></h2><p>在 JDK 1.4 中新引入了 NIO 类，它可以使用 Native 函数库直接分配堆外内存，然后通过 Java 堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在堆内存和堆外内存来回拷贝数据。</p><h1 id="hotpot-虚拟机对象" tabindex="-1">Hotpot 虚拟机对象 <a class="header-anchor" href="#hotpot-虚拟机对象" aria-label="Permalink to &quot;Hotpot 虚拟机对象&quot;">​</a></h1><h2 id="对象的内存布局" tabindex="-1">对象的内存布局 <a class="header-anchor" href="#对象的内存布局" aria-label="Permalink to &quot;对象的内存布局&quot;">​</a></h2><p>在 Hotspot 虚拟机中，对象在内存中的布局可以分为 3 块区域：</p><ul><li>对象头</li><li>实例数据</li><li>对齐填充</li></ul><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/JVM/j_5.png"></div><h3 id="对象头" tabindex="-1">对象头 <a class="header-anchor" href="#对象头" aria-label="Permalink to &quot;对象头&quot;">​</a></h3><p>Hotspot 虚拟机的对象头包括两部分信息：</p><p>一部分用于存储对象自身的运行时数据（哈希码、GC分代年龄、锁状态标志等等）；</p><p>另一部分是类型指针，即对象指向它的<strong>类元数据的指针</strong>，虚拟机通过这个指针来<strong>确定这个对象是哪个类的实例</strong>。</p><h3 id="实例数据" tabindex="-1">实例数据 <a class="header-anchor" href="#实例数据" aria-label="Permalink to &quot;实例数据&quot;">​</a></h3><p>实例数据部分是对象真正存储的有效信息，也是在程序中所定义的各种类型的字段内容。</p><h3 id="对齐填充" tabindex="-1">对齐填充 <a class="header-anchor" href="#对齐填充" aria-label="Permalink to &quot;对齐填充&quot;">​</a></h3><p>对齐填充部分不是必然存在的，也没有什么特别的含义，仅仅起<strong>占位</strong>作用。</p><p>因为 Hotspot 虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是对象的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数（1倍或2倍），因此，当对象实例数据部分没有对齐时，就需要通过对齐填充来补全。</p><h2 id="对象的创建" tabindex="-1">对象的创建 <a class="header-anchor" href="#对象的创建" aria-label="Permalink to &quot;对象的创建&quot;">​</a></h2><p>Java 对象的创建过程分为以下5步：</p><ul><li>类加载检查</li><li>分配内存</li><li>初始化零值</li><li>设置对象头</li><li>执行 &lt;init&gt; 方法</li></ul><h3 id="_1-类加载检查" tabindex="-1">1. 类加载检查 <a class="header-anchor" href="#_1-类加载检查" aria-label="Permalink to &quot;1. 类加载检查&quot;">​</a></h3><p>虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的<strong>符号引用</strong>， 并且检查这个符号引用代表的类是否已被加载过、解析和初始化过。 如果没有，那必须先执行相应的类加载过程。</p><h3 id="_2-分配内存" tabindex="-1">2. 分配内存 <a class="header-anchor" href="#_2-分配内存" aria-label="Permalink to &quot;2. 分配内存&quot;">​</a></h3><p>在类加载检查通过后，接下来虚拟机将为新生对象分配内存。 对象所需的内存大小在类加载完成后便可确定，为对象分配空间的任务等同于把一块确定大小的内存从 Java 堆中划分出来。分配方式有 “指针碰撞” 和 “空闲列表” 两种，选择那种分配方式由 Java 堆是否规整决定。</p><p>Java 堆内存是否规整，则取决于 GC 收集器的算法是“标记-清除”，还是“标记-整理”（也称作“标记-压缩”），值得注意的是，“复制算法”内存也是规整的。</p><h4 id="两种内存分配方式" tabindex="-1">两种内存分配方式 <a class="header-anchor" href="#两种内存分配方式" aria-label="Permalink to &quot;两种内存分配方式&quot;">​</a></h4><h5 id="指针碰撞" tabindex="-1">指针碰撞 <a class="header-anchor" href="#指针碰撞" aria-label="Permalink to &quot;指针碰撞&quot;">​</a></h5><ul><li>原理：用过的内存全部整合到一边，没有用过的内存放在另一边，中间有一个分界值指针，只需要向着没用过的内存方向将指针移动一段与对象大小相等的距离。</li><li>适用场景：堆内存规整(即没有内存碎片)的情况</li><li>GC(Garbage Collection)收集器：Serial、ParNew</li></ul><h5 id="空闲列表" tabindex="-1">空闲列表 <a class="header-anchor" href="#空闲列表" aria-label="Permalink to &quot;空闲列表&quot;">​</a></h5><ul><li>原理：虚拟机会维护一个列表，在该列表中记录哪些内存块是可用的，在分配的时候，找一块足够大的内存块划分给对象示例，然后更新列表记录</li><li>适用场景：堆内存规整</li><li>GC(Garbage Collection)收集器：CMS</li></ul><h4 id="内存分配并发问题" tabindex="-1">内存分配并发问题 <a class="header-anchor" href="#内存分配并发问题" aria-label="Permalink to &quot;内存分配并发问题&quot;">​</a></h4><p>在创建对象的时候有一个很重要的问题，就是线程安全，因为在实际开发过程中，创建对象是很频繁的事情， 作为虚拟机来说，必须要保证线程是安全的，通常来讲，虚拟机采用两种方式来保证线程安全：</p><ul><li>CAS+失败重试： CAS 是乐观锁的一种实现方式。所谓乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。虚拟机采用CAS配上失败重试的方式保证更新操作的原子性。</li><li>TLAB：每一个线程预先在Java堆中分配一块内存，称为<strong>本地线程分配缓冲(Thread Local Allocation Buffer,TLAB)</strong>。哪个线程要分配内存，就在哪个线程的 TLAB 上分配，只有 TLAB 用完并分配新的 TLAB 时，才采用上述的 CAS 进行内存分配。</li></ul><h3 id="_3-初始化零值" tabindex="-1">3. 初始化零值 <a class="header-anchor" href="#_3-初始化零值" aria-label="Permalink to &quot;3. 初始化零值&quot;">​</a></h3><p>内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头），这一步操作<strong>保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用</strong>，程序能访问到这些字段的数据类型所对应的零值。</p><h3 id="_4-设置对象头" tabindex="-1">4. 设置对象头 <a class="header-anchor" href="#_4-设置对象头" aria-label="Permalink to &quot;4. 设置对象头&quot;">​</a></h3><p>初始化零值完成之后，虚拟机要对对象进行必要的设置，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希吗、对象的 GC 分代年龄等信息。 这些信息存放在对象头中。 另外，根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。</p><h3 id="_5-执行-init-方法" tabindex="-1">5. 执行 init 方法 <a class="header-anchor" href="#_5-执行-init-方法" aria-label="Permalink to &quot;5. 执行 init 方法&quot;">​</a></h3><p>在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了，但从 Java 程序的视角来看，对象创建才刚开始，<strong>&lt;init&gt; 方法还没有执行，所有的字段都还为零</strong>。所以一般来说，执行 new 指令之后会接着执行 &lt;init &gt; 方法，把<strong>对象按照程序员的意愿进行初始化</strong>，这样一个真正可用的对象才算完全产生出来。</p><h2 id="对象的访问定位" tabindex="-1">对象的访问定位 <a class="header-anchor" href="#对象的访问定位" aria-label="Permalink to &quot;对象的访问定位&quot;">​</a></h2><p>建立对象就是为了使用对象，我们的Java程序通过栈上的 reference 数据来操作堆上的具体对象。 对象的访问方式视虚拟机的实现而定，目前主流的访问方式有两种：使用句柄、直接指针。</p><h3 id="使用句柄" tabindex="-1">使用句柄 <a class="header-anchor" href="#使用句柄" aria-label="Permalink to &quot;使用句柄&quot;">​</a></h3><p>如果使用句柄的话，那么 Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是<strong>对象的句柄地址</strong>，而句柄中包含了对象实例数据与类型数据各自的具体地址信息 。</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/JVM/j_6.png"></div><h3 id="直接指针" tabindex="-1">直接指针 <a class="header-anchor" href="#直接指针" aria-label="Permalink to &quot;直接指针&quot;">​</a></h3><p>如果使用直接指针访问，那么 Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而 reference 中存储的直接就是<strong>对象的地址</strong>。</p><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/JVM/j_7.png"></div><p>这两种对象访问方式各有优势：</p><ul><li>使用句柄来访问的最大好处是 reference 中存储的是稳定的句柄地址，在对象被移动时只会改变句柄中的实例数据指针，而 <strong>reference 本身不需要修改</strong>。</li><li>使用直接指针访问方式最大的好处就是<strong>速度快</strong>，它节省了一次指针定位的时间开销。</li></ul>`,157),e=[t];function p(r,h,o,d,k,g){return i(),a("div",null,e)}const E=s(l,[["render",p]]);export{u as __pageData,E as default};
