import{_ as a,c as e,o as t,a4 as r}from"./chunks/framework.DpC1ZpOZ.js";const u=JSON.parse('{"title":"Java I/O 概览","description":"","frontmatter":{},"headers":[],"relativePath":"java/JavaIO/1_概览.md","filePath":"java/JavaIO/1_概览.md","lastUpdated":1728037326000}'),i={name:"java/JavaIO/1_概览.md"},l=r('<h1 id="java-i-o-概览" tabindex="-1">Java I/O 概览 <a class="header-anchor" href="#java-i-o-概览" aria-label="Permalink to &quot;Java I/O 概览&quot;">​</a></h1><h2 id="i-o-介绍" tabindex="-1">I/O 介绍 <a class="header-anchor" href="#i-o-介绍" aria-label="Permalink to &quot;I/O 介绍&quot;">​</a></h2><p>I/O（<strong>I</strong>nput/<strong>O</strong>utpu） 即<strong>输入／输出</strong> 。</p><p>学术的说 I/O 是信息处理系统（计算机）与外界（人或信息处理系统）间的通信。如计算机，即 CPU 访问任何寄存器和 Cache 等封装以外的数据资源都可当成 I/O ，包括且不限于内存，磁盘，显卡。</p><p>软件开发中的 I/O 则常指磁盘、网络 IO。</p><p>补充：</p><ul><li><a href="https://llc687.top/126.html" target="_blank" rel="noreferrer">如何完成一次IO</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg3MjA4MTExMw==&amp;mid=2247484746&amp;idx=1&amp;sn=c0a7f9129d780786cabfcac0a8aa6bb7&amp;source=41&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">5 种IO模型</a></li></ul><h2 id="同步-异步" tabindex="-1">同步 &amp; 异步 <a class="header-anchor" href="#同步-异步" aria-label="Permalink to &quot;同步 &amp; 异步&quot;">​</a></h2><p>同步、异步是消息通知机制。</p><ul><li>同步：同步就是发起一个调用后，被调用者未处理完请求之前，调用不返回。</li><li>异步：异步就是发起一个调用后，立刻得到被调用者的回应表示已接收到请求，但是被调用者并没有返回结果，此时我们可以处理其他的请求，被调用者通常依靠事件，回调等机制来通知调用者其返回结果。</li></ul><p>同步和异步的区别最大在于异步的话调用者不需要等待处理结果，被调用者会通过回调等机制来通知调用者其返回结果。</p><h2 id="阻塞-非阻塞" tabindex="-1">阻塞 &amp; 非阻塞 <a class="header-anchor" href="#阻塞-非阻塞" aria-label="Permalink to &quot;阻塞 &amp; 非阻塞&quot;">​</a></h2><p>阻塞、非阻塞是等待通知时的状态。</p><ul><li>阻塞： 阻塞就是发起一个请求，调用者一直等待请求结果返回，也就是当前线程会被挂起，无法从事其他任务，只有当条件就绪才能继续。</li><li>非阻塞：非阻塞就是发起一个请求，调用者不用一直等着结果返回，可以先去干其他事情。</li></ul><p>举个生活中简单的例子：</p><p>你妈妈让你烧水，小时候你比较笨啊，在哪里傻等着水开（ <strong>同步阻塞</strong> ）。等你稍微再长大一点，你知道每次烧水的空隙可以去干点其他事，然后只需要时不时来看看水开了没有（ <strong>同步非阻塞</strong> ）。后来，你们家用上了水开了会发出声音的壶，这样你就只需要听到响声后就知道水开了，在这期间你可以随便干自己的事情（ <strong>异步非阻塞</strong> ）。</p><h2 id="java-i-o-分类" tabindex="-1">Java I/O 分类 <a class="header-anchor" href="#java-i-o-分类" aria-label="Permalink to &quot;Java I/O 分类&quot;">​</a></h2><p>Java 的 I/O 大概可以分成以下几类：</p><ul><li>磁盘操作：File</li><li>字节操作：InputStream 和 OutputStream</li><li>字符操作：Reader 和 Writer</li><li>对象操作：Serializable</li><li>网络操作：Socket</li><li>新的输入/输出：NIO &amp; AIO</li></ul>',19),o=[l];function n(p,s,c,_,h,d){return t(),e("div",null,o)}const I=a(i,[["render",n]]);export{u as __pageData,I as default};
