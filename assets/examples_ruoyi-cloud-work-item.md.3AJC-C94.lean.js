import{_ as s,c as a,o as n,a4 as i}from"./chunks/framework.DpC1ZpOZ.js";const e="/assets/nacoa-1.DZaFdQxy.png",l="/assets/nacoa-2.CTP-XFnC.png",p="/assets/nacoa-3.B66OTpVd.png",m=JSON.parse('{"title":"开源项目","description":"","frontmatter":{"outline":"deep","lastUpdated":true},"headers":[],"relativePath":"examples/ruoyi-cloud-work-item.md","filePath":"examples/ruoyi-cloud-work-item.md","lastUpdated":null}'),t={name:"examples/ruoyi-cloud-work-item.md"},r=i(`<h1 id="开源项目" tabindex="-1">开源项目 <a class="header-anchor" href="#开源项目" aria-label="Permalink to &quot;开源项目&quot;">​</a></h1><p>整理整理一些自己的javaWeb开源项目，本文档记录的网站样例为：若依spring-Cloud版。</p><p>ruoyi-vue分离版本人演示地址：<a href="http://8.138.177.13:81" target="_blank" rel="noreferrer">http://8.138.177.13:81</a></p><p>ruoyi-cloud微服务版官方演示地址：<a href="http://cloud.ruoyi.vip" target="_blank" rel="noreferrer">http://cloud.ruoyi.vip</a></p><p>ruoyi-cloud微服务版官方文档地址：<a href="https://doc.ruoyi.vip/ruoyi-cloud/" target="_blank" rel="noreferrer">https://doc.ruoyi.vip/ruoyi-cloud/</a></p><p>ruoyi-cloud微服务版代码下载地址：<a href="https://gitee.com/y_project/RuoYi-Cloud" target="_blank" rel="noreferrer">https://gitee.com/y_project/RuoYi-Cloud</a></p><h2 id="若依微服务版架构图" tabindex="-1">若依微服务版架构图 <a class="header-anchor" href="#若依微服务版架构图" aria-label="Permalink to &quot;若依微服务版架构图&quot;">​</a></h2><p><img src="https://img.picgo.net/2024/09/22/ruoyi-cloud-frameworkec294d136475284c.png" alt="ruoyi-cloud-framework.png" loading="lazy"></p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>架构图 <a href="https://www.processon.com/view/5ec290195653bb6f2a18504e" target="_blank" rel="noreferrer">RuoYi-Cloud-Processon</a>分享地址。</p></div><h2 id="ruoyi-vue微服务版-若依框架搭建-🌐" tabindex="-1">(ruoyi-vue微服务版)若依框架搭建 🌐 <a class="header-anchor" href="#ruoyi-vue微服务版-若依框架搭建-🌐" aria-label="Permalink to &quot;(ruoyi-vue微服务版)若依框架搭建 🌐&quot;">​</a></h2><h3 id="运行" tabindex="-1">运行 <a class="header-anchor" href="#运行" aria-label="Permalink to &quot;运行&quot;">​</a></h3><h4 id="本地环境" tabindex="-1">本地环境 <a class="header-anchor" href="#本地环境" aria-label="Permalink to &quot;本地环境&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>JDK &gt;= 1.8 (推荐1.8版本)</span></span>
<span class="line"><span>Mysql &gt;= 5.7.0 (推荐5.7版本)</span></span>
<span class="line"><span>Redis &gt;= 3.0</span></span>
<span class="line"><span>Maven &gt;= 3.0</span></span>
<span class="line"><span>Node &gt;= 12</span></span>
<span class="line"><span>nacos &gt;= 2.0.4 (ruoyi-cloud &lt; 3.0 需要下载nacos &gt;= 1.4.x版本)</span></span>
<span class="line"><span>sentinel &gt;= 1.6.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>因为本项目是微服务的，所以需要前后端都单独启动好，才能进行访问。同时后端需要启动多个模块。</p><h4 id="nacos安装-在window系统下" tabindex="-1">Nacos安装(在window系统下) <a class="header-anchor" href="#nacos安装-在window系统下" aria-label="Permalink to &quot;Nacos安装(在window系统下)&quot;">​</a></h4><ul><li>下载nacos对应GitHub的链接：<a href="https://github.com/alibaba/nacos/tags" target="_blank" rel="noreferrer">https://github.com/alibaba/nacos/tags</a></li><li>进入链接后，选择所需版本并点击zip格式下载</li><li>下载完成后解压可以看到如下目录：</li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>nacos</span></span>
<span class="line"><span>├─ bin       //启动脚本目录</span></span>
<span class="line"><span>├─ conf      //配置文件目录</span></span>
<span class="line"><span>├─ data      //源代码目录</span></span>
<span class="line"><span>├─ plugin    //日志目录</span></span>
<span class="line"><span>├─ plugin    //插件目录</span></span>
<span class="line"><span>├─ target    //编译后的输出目录</span></span>
<span class="line"><span>├─ LICENSE   </span></span>
<span class="line"><span>└─ NOTICE</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>我们可以通过修改config目录下的 application.properties 文件修改nacos配置。比如端口号，其默认值为8848，是一个非常成功人士的端口，一般情况下无需修改。</li><li>完成上述操作后我们可以试着启动nacos,首先进入bin目录下，路径栏输入cmd 进入命令行窗口，输入：</li></ul><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./startup.cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> standalone</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><details class="details custom-block"><summary>nacos配置详情</summary><p>即可启动nacos。成功界面如下</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;nacos is starting with standalone&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>         ,--.</span></span>
<span class="line"><span>       ,--.&#39;|</span></span>
<span class="line"><span>   ,--,:  : |                                           Nacos 2.4.2</span></span>
<span class="line"><span>,\`--.&#39;\`|  &#39; :                       ,---.               Running in stand alone mode, All function modules</span></span>
<span class="line"><span>|   :  :  | |                      &#39;   ,&#39;\\   .--.--.    Port: 8848</span></span>
<span class="line"><span>:   |   \\ | :  ,--.--.     ,---.  /   /   | /  /    &#39;   Pid: 16796</span></span>
<span class="line"><span>|   : &#39;  &#39;; | /       \\   /     \\.   ; ,. :|  :  /\`./   Console: http://127.0.0.1:8848/nacos/index.html</span></span>
<span class="line"><span>&#39;   &#39; ;.    ;.--.  .-. | /    / &#39;&#39;   | |: :|  :  ;_</span></span>
<span class="line"><span>|   | | \\   | \\__\\/: . ..    &#39; / &#39;   | .; : \\  \\    \`.      https://nacos.io</span></span>
<span class="line"><span>&#39;   : |  ; .&#39; ,&quot; .--.; |&#39;   ; :__|   :    |  \`----.   \\</span></span>
<span class="line"><span>|   | &#39;\`--&#39;  /  /  ,.  |&#39;   | &#39;.&#39;|\\   \\  /  /  /\`--&#39;  /</span></span>
<span class="line"><span>&#39;   : |     ;  :   .&#39;   \\   :    : \`----&#39;  &#39;--&#39;.     /</span></span>
<span class="line"><span>;   |.&#39;     |  ,     .-./\\   \\  /            \`--&#39;---&#39;</span></span>
<span class="line"><span>&#39;---&#39;        \`--\`---&#39;     \`----&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>2024-09-22 22:25:40,708 INFO Tomcat initialized with port(s): 8848 (http)</span></span>
<span class="line"><span>2024-09-22 22:25:40,941 INFO Root WebApplicationContext: initialization completed in 2483 ms</span></span>
<span class="line"><span>2024-09-22 22:25:44,967 INFO Will secure any request with [org.springframework.security.web.session.DisableEncodeUrlFilter@65a4798f, org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@773f7880, org.springframework.security.web.context.SecurityContextPersistenceFilter@20b5f2ac, org.springframework.security.web.header.HeaderWriterFilter@36676c1a, org.springframework.security.web.csrf.CsrfFilter@4763c727, org.springframework.security.web.authentication.logout.LogoutFilter@2e54db99, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7e3060d8, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@2692b61e, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@878452d, org.springframework.security.web.session.SessionManagementFilter@4d098f9b, org.springframework.security.web.access.ExceptionTranslationFilter@51e8e6e6]</span></span>
<span class="line"><span>2024-09-22 22:25:45,208 INFO Adding welcome page: class path resource [static/index.html]</span></span>
<span class="line"><span>2024-09-22 22:25:45,564 INFO Exposing 1 endpoint(s) beneath base path &#39;/actuator&#39;</span></span>
<span class="line"><span>2024-09-22 22:25:45,575 WARN You are asking Spring Security to ignore Ant [pattern=&#39;/**&#39;]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.</span></span>
<span class="line"><span>2024-09-22 22:25:45,576 INFO Will not secure Ant [pattern=&#39;/**&#39;]</span></span>
<span class="line"><span>2024-09-22 22:25:45,576 WARN You are asking Spring Security to ignore Mvc [pattern=&#39;/prometheus&#39;]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.</span></span>
<span class="line"><span>2024-09-22 22:25:45,576 INFO Will not secure Mvc [pattern=&#39;/prometheus&#39;]</span></span>
<span class="line"><span>2024-09-22 22:25:45,577 WARN You are asking Spring Security to ignore Mvc [pattern=&#39;/prometheus/namespaceId/{namespaceId}&#39;]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.</span></span>
<span class="line"><span>2024-09-22 22:25:45,578 INFO Will not secure Mvc [pattern=&#39;/prometheus/namespaceId/{namespaceId}&#39;]</span></span>
<span class="line"><span>2024-09-22 22:25:45,578 WARN You are asking Spring Security to ignore Mvc [pattern=&#39;/prometheus/namespaceId/{namespaceId}/service/{service}&#39;]. This is not recommended -- please use permitAll via HttpSecurity#authorizeHttpRequests instead.</span></span>
<span class="line"><span>2024-09-22 22:25:45,578 INFO Will not secure Mvc [pattern=&#39;/prometheus/namespaceId/{namespaceId}/service/{service}&#39;]</span></span>
<span class="line"><span>2024-09-22 22:25:45,610 INFO Tomcat started on port(s): 8848 (http) with context path &#39;/nacos&#39;</span></span>
<span class="line"><span>2024-09-22 22:25:45,610 INFO No TaskScheduler/ScheduledExecutorService bean found for scheduled processing</span></span>
<span class="line"><span>2024-09-22 22:25:45,626 INFO Nacos started successfully in stand alone mode. use external storage</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><ul><li>启动<code>nacos</code>后，运行成功可以通过(<code>localhost:8848</code>)访问,图形界面工具。</li></ul><p><em><strong>nacos的服务注册</strong></em></p><ul><li>现在我们就来将我们的服务注册进nacos,首先我们引入nacos服务发现依赖</li></ul><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.alibaba.cloud&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>其次在配置文件(yaml格式)进行如下简单nacos配置</li></ul><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">orderserver</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #注册的服务名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cloud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    nacos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      server-addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">localhost:8848</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #nacos地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      discovery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        cluster-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">HZ</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #设置集群名称</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>现在我们启动该服务，即可在nacos图形界面的服务列表中找到我们的服务 <img src="`+e+`" alt="nacoa-1.png" loading="lazy"></li><li>现在我们的服务就已经注册完成了 <em><strong>利用图形化界面配置服务</strong></em></li><li>现在我们在注册user服务并实现热更新式配置,首先引入nacos配置依赖</li></ul><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.alibaba.cloud&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;spring-cloud-starter-alibaba-nacos-config&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>然后在user服务资源文件夹下创建 bootstrap.yml（优先于application.yml文件读取，以提前获得nacos地址用于读取存放在nacos的远程配置，） 文件，并写入如下代码</li></ul><div class="language-yml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">spring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">userservice</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #服务名称</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  profiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #服务所处环境，dev表示开发环境</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  cloud</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    nacos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      server-addr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">localhost:8848</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #nacos地址</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        file-extension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">yaml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #nacos远程配置格式</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>启动服务</li><li>现在我们来到图形化界面，打开配置管理&gt;&gt;配置列表，点击创建配置打开如下界面: <img src="`+l+'" alt="nacoa-2.png" loading="lazy"></li><li>其中dataid的格式是固定的： “服务名”+ “-”+“环境名” .格式名，分别对应bootstrap.yml文件中的userservice , dev, yaml。 所以我的dataid就是： userservice-dev.yaml</li><li>描述按情况写</li><li>选择格式为yaml</li><li>配置内容我就以日期格式化的模板为例，结果如下: <img src="'+p+`" alt="nacoa-3.png" loading="lazy"></li><li>点击发布，我们就完成了远程配置</li><li>值得注意的是，如果不指定服务环境，即可命名为：userservice.yaml。它将对所有环境的用户服务生效。如果同一个配置同时存在上述两种配置和代码中的本地配置则： userservice-dev.yaml &gt; userservice.yaml &gt; 本地配置</li><li>最后一步，回到我们的代码上，如下声明一个类：</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lombok.Data;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.boot.context.properties.ConfigurationProperties;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.springframework.stereotype.Component;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pattern&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这里的prefix用来指明前缀</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Component</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Pattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String dateformat; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这里变量名必须是配置的名称</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>现在这个类已经在spring容器中了，我们就可以直接通过自动装配在服务的其他地方用Pattern对象获取字符串：yyyy/MM/dd HH:mm:ss 了</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pattern dateformat;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/now&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dataformat: {}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dateformat);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LocalDateTime.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DateTimeFormatter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofPattern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dateformat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDateformat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><p>ok，现在我们启动服务，输入<a href="http://localhost" target="_blank" rel="noreferrer">http://localhost</a>:端口号/user/now 就可以获得格式化后的日期了</p></li><li><p>注意：我们这样实现的热更新配置在更改nacos管理的远程配置时，无须重启即可生效</p></li><li><p>以上就是nacos的入门介绍,原文链接：<a href="https://blog.csdn.net/qq_62859700/article/details/136278303" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_62859700/article/details/136278303</a></p></li></ul></details><h4 id="在本地环境运行后端" tabindex="-1">在本地环境运行后端 <a class="header-anchor" href="#在本地环境运行后端" aria-label="Permalink to &quot;在本地环境运行后端&quot;">​</a></h4><ol><li>导入到<code>Eclipse</code>，菜单 <code>File</code> -&gt; <code>Import</code>，然后选择 <code>Maven</code> -&gt; <code>Existing Maven Projects</code>，点击 <code>Next</code>&gt; 按钮，选择工作目录，然后点击 <code>Finish</code> 按钮，即可成功导入。 <code>Eclipse</code>会自动加载<code>Maven</code>依赖包，初次加载会比较慢（根据自身网络情况而定）</li><li>创建数据库<code>ry-cloud</code>并导入数据脚本<code>ry_2021xxxx.sql</code>（必须），<code>quartz.sql</code>（可选）</li><li>创建数据库<code>ry-config</code>并导入数据脚本<code>ry_config_2021xxxx.sql</code>（必须）</li></ol><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 导入数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> DATABASE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`ry-vue\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> CHARACTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> utf8;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">home</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/sql/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ry_20240629</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>导出数据和表结构：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqldump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u用户名</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p密码</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 数据库名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 数据库名.sql</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="4"><li>配置<code>nacos</code>持久化，修改<code>conf/application.properties</code>文件，增加支持<code>mysql</code>数据源配置</li></ol><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># db mysql</span></span>
<span class="line"><span>spring.datasource.platform=mysql</span></span>
<span class="line"><span>db.num=1</span></span>
<span class="line"><span>db.url.0=jdbc:mysql://localhost:3306/ry-config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span>
<span class="line"><span>db.user=root</span></span>
<span class="line"><span>db.password=password</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>配置文件<code>application.properties</code>是在下载的<code>nacos-server</code>包<code>conf</code>目录下。 最新<code>RuoYi-Cloud</code>版本<code>&gt;=3.0.0</code>需要下载的<code>nacos-server</code>必须<code>&gt;=2.x.x</code>版本。 默认配置单机模式，<code>nacos</code>集群/多集群部署模式参考 <a href="https://nacos.io/zh-cn/docs/deployment.html" target="_blank" rel="noreferrer"><code>Nacos</code>支持三种部署模式</a></p></div><ol start="5"><li>打开运行基础模块（启动没有先后顺序）</li></ol><table tabindex="0"><thead><tr><th>模块名</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td>RuoYiGatewayApplication</td><td style="text-align:left;">网关模块 （必须）</td></tr><tr><td>RuoYiAuthApplication</td><td style="text-align:left;">认证模块 （必须）</td></tr><tr><td>RuoYiSystemApplication</td><td style="text-align:left;">系统模块 （必须）</td></tr><tr><td>RuoYiMonitorApplication</td><td style="text-align:left;">监控中心 （可选）</td></tr><tr><td>RuoYiGenApplication</td><td style="text-align:left;">代码生成 （可选）</td></tr><tr><td>RuoYiJobApplication</td><td style="text-align:left;">定时任务 （可选）</td></tr><tr><td>RuoYFileApplication</td><td style="text-align:left;">文件服务 （可选）</td></tr></tbody></table><p>打开项目运行<code>com.ruoyi.system.RuoYiSystemApplication.java</code>，出现如下图表示启动成功。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(♥◠‿◠)ﾉﾞ  系统模块启动成功   ლ(´ڡ\`ლ)ﾞ  </span></span>
<span class="line"><span> .-------.       ____     __        </span></span>
<span class="line"><span> |  _ _   \\      \\   \\   /  /    </span></span>
<span class="line"><span> | ( &#39; )  |       \\  _. /  &#39;       </span></span>
<span class="line"><span> |(_ o _) /        _( )_ .&#39;         </span></span>
<span class="line"><span> | (_,_).&#39; __  ___(_ o _)&#39;          </span></span>
<span class="line"><span> |  |\\ \\  |  ||   |(_,_)&#39;         </span></span>
<span class="line"><span> |  | \\ \`&#39;   /|   \`-&#39;  /           </span></span>
<span class="line"><span> |  |  \\    /  \\      /           </span></span>
<span class="line"><span> &#39;&#39;-&#39;   \`&#39;-&#39;    \`-..-&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>运行前需要先启动<code>nacos</code>，运行成功可以通过(<code>localhost:8080</code>)访问，但是不会出现静态页面，可以继续参考下面步骤部署<code>ruoyi-ui</code>前端，然后通过前端地址来访问。</p></div><ol start="6"><li>集成seata分布式事务（可选配置，默认不启用）</li></ol><p>创建数据库<code>ry-seata</code>并导入数据脚本<code>ry_seata_2021xxxx.sql</code><a href="https://doc.ruoyi.vip/ruoyi-cloud/cloud/seata.html#%E9%9B%86%E6%88%90nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83" target="_blank" rel="noreferrer">参考集成nacos配置中心</a></p><h4 id="在本地环境运行前端" tabindex="-1">在本地环境运行前端 <a class="header-anchor" href="#在本地环境运行前端" aria-label="Permalink to &quot;在本地环境运行前端&quot;">​</a></h4><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入项目目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ruoyi-ui</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 强烈建议不要用直接使用 cnpm 安装，会有各种诡异的 bug，可以通过重新指定 registry 来解决 npm 安装速度慢的问题。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --registry=https://registry.npmmirror.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 本地开发 启动项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>前端运行成功可以通过(<code>localhost:80</code>) 默认账户/密码 admin/admin123） 若能正确展示登录页面，并能成功登录，菜单及页面展示正常，则表明环境搭建成功。</p></div><p>前端配置 修改前端配置，编辑<code>ruoyi-ui</code>目录下的<code>vue.config.js</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // webpack-dev-server 相关配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  devServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    host</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0.0.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    # 前端的</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">端口，默认为80</span></span>
<span class="line highlighted"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    port</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 端口,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VUE_APP_BASE_API</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        # 反向代理后端的HTTP端口,默认为8080</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target: http :</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//localhost:8080,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        changeOrigin: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pathRewrite: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;^&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VUE_APP_BASE_API</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    disableHostCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-label="Permalink to &quot;部署&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">提示</p><p>因为本项目是微服务的，所以部署方式有多种。</p></div><h4 id="微服务部署的主要方式‌" tabindex="-1">微服务部署的主要方式‌ <a class="header-anchor" href="#微服务部署的主要方式‌" aria-label="Permalink to &quot;微服务部署的主要方式‌&quot;">​</a></h4><p>微服务的部署方式主要有以下几种：</p><table tabindex="0"><thead><tr><th>部署方式</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td>单机多进程</td><td style="text-align:left;">在单台机器上运行多个微服务进程，每个服务监听不同的端口并通过环回接口进行通信。</td></tr><tr><td>多台机器多进程</td><td style="text-align:left;">在多台机器上运行多个微服务进程，提供更高的可扩展性和可用性。</td></tr><tr><td>容器</td><td style="text-align:left;">将微服务封装在容器中，通过容器编排工具进行部署和管理。</td></tr><tr><td>‌编排器</td><td style="text-align:left;">使用‌Kubernetes或‌Nomad等编排器，自动化和管理微服务的部署。</td></tr><tr><td>无服务器</td><td style="text-align:left;">在云环境中直接运行代码，无需关心进程和服务器。</td></tr><tr><td>单主机多服务实例模式</td><td style="text-align:left;">在单台主机上运行多个服务实例，共享服务器资源。</td></tr></tbody></table><p>每种部署方式的详细描述和优缺点：</p><table tabindex="0"><thead><tr><th>部署方式</th><th style="text-align:left;">优点</th><th style="text-align:left;">缺点</th></tr></thead><tbody><tr><td>‌单机多进程</td><td style="text-align:left;">轻量级、方便、容易排除故障、固定计费。</td><td style="text-align:left;">没有可扩展性、单点故障、资源限制。</td></tr><tr><td>‌多台机器多进程</td><td style="text-align:left;">高可扩展性、高可用性。</td><td style="text-align:left;">成本较高、管理复杂。</td></tr><tr><td>‌容器</td><td style="text-align:left;">轻量级、灵活、易于管理。</td><td style="text-align:left;">学习曲线、资源隔离问题。</td></tr><tr><td>编排器</td><td style="text-align:left;">自动化、高可用性、可扩展性。</td><td style="text-align:left;">复杂度高、成本较高。</td></tr><tr><td>‌无服务器</td><td style="text-align:left;">无需关心服务器和进程、成本低。</td><td style="text-align:left;">适用范围有限、功能限制。</td></tr><tr><td>‌单主机多服务实例模式</td><td style="text-align:left;">资源利用高效、部署快速。</td><td style="text-align:left;">服务实例间隔离差、运维复杂。</td></tr></tbody></table><h4 id="线上环境" tabindex="-1">线上环境 <a class="header-anchor" href="#线上环境" aria-label="Permalink to &quot;线上环境&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>JDK &gt;= 1.8 (推荐1.8版本)</span></span>
<span class="line"><span>Mysql &gt;= 5.7.0 (推荐5.7版本)</span></span>
<span class="line"><span>Redis &gt;= 3.0</span></span>
<span class="line"><span>Maven &gt;= 3.0</span></span>
<span class="line"><span>Node &gt;= 12</span></span>
<span class="line"><span>nacos &gt;= 2.0.4 (ruoyi-cloud &lt; 3.0 需要下载nacos &gt;= 1.4.x版本)</span></span>
<span class="line"><span>sentinel &gt;= 1.6.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><a href="/examples/ruoyi-vue-work-item.html#部署">部分安装方法可以见若依前后端分离版的部署方法</a></p><p><a href="https://sentinelguard.io/zh-cn/docs/quick-start.html" target="_blank" rel="noreferrer">sentinel部署方法</a></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sentinel-dashboard-1.8.8.jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --server.port=8718</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><details class="details custom-block"><summary>nacos部署方法</summary><p>Nacos 是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。以下是部署 Nacos 的基本步骤：</p><p>下载 Nacos: 访问 Nacos 的 GitHub 仓库 (<a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noreferrer">https://github.com/alibaba/nacos/releases</a>) 下载最新的 Nacos 二进制包。</p><p>解压 Nacos: 将下载的 Nacos 包解压到指定目录。</p><p>运行 Nacos: 进入 Nacos 的 bin 目录，根据操作系统运行对应的启动脚本。</p><p>对于单机模式（开发或测试环境），可以直接运行以下命令：</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入 Nacos 的 bin 目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nacos/bin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动 Nacos 服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./startup.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> standalone</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">对于集群模式，您需要准备至少三个</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Nacos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 实例以构建一个三节点集群。在此模式下，确保数据库（如</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MySQL）被正确配置，并且每个</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Nacos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 实例都能连接到这个数据库。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>以下是集群部署的基本步骤：</p><p>配置 Nacos 集群配置文件: 在 nacos/conf 目录中，编辑 cluster.conf 文件，添加所有集群节点的 IP 和端口信息。</p><p>配置数据库: 修改 nacos/conf/application.properties 文件，配置数据库连接信息。</p><p>启动 Nacos 实例: 分别在每个节点上运行 Nacos，使用相同的配置文件。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进入 Nacos 的 bin 目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nacos/bin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动 Nacos 服务</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./startup.sh</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">确保防火墙和网络设置允许相应的端口（默认为</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8848）上的流量。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>以上步骤是部署 Nacos 的基本步骤，具体细节可能因环境和需求有所不同。</p></details>`,53),h=[r];function c(d,k,o,u,b,g){return n(),a("div",null,h)}const y=s(t,[["render",c]]);export{m as __pageData,y as default};
