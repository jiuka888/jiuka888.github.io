import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.DpC1ZpOZ.js";const o=JSON.parse('{"title":"异常-Exception","description":"","frontmatter":{},"headers":[],"relativePath":"java/JavaBasics/6_反射.md","filePath":"java/JavaBasics/6_反射.md","lastUpdated":1728037326000}'),t={name:"java/JavaBasics/6_反射.md"},l=n(`<h1 id="异常-exception" tabindex="-1">异常-Exception <a class="header-anchor" href="#异常-exception" aria-label="Permalink to &quot;异常-Exception&quot;">​</a></h1><h2 id="异常的概念" tabindex="-1">异常的概念 <a class="header-anchor" href="#异常的概念" aria-label="Permalink to &quot;异常的概念&quot;">​</a></h2><p>Java 异常是一个描述在代码段中<strong>发生异常的对象</strong>，当发生异常情况时，一个代表该异常的对象被创建并且在导致该异常的方法中被抛出，而该方法可以选择自己处理异常或者传递该异常。</p><h2 id="异常继承体系" tabindex="-1">异常继承体系 <a class="header-anchor" href="#异常继承体系" aria-label="Permalink to &quot;异常继承体系&quot;">​</a></h2><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/java-notes/java/PPjwP.png" width="600"></div><p>Throwable 可以用来表示任何可以作为异常抛出的类，分为两种： <strong>Error</strong> 和 <strong>Exception</strong>。</p><ul><li>Error：通常是灾难性的致命的错误，是<strong>程序无法控制和处理</strong>的，当出现这些错误时，建议终止程序；</li><li>Exception：通常情况下是可以被程序处理的，捕获后可能恢复，并且在程序中应该<strong>尽可能地去处理</strong>这些异常。</li></ul><p>Java 异常分为两种：</p><ul><li>受检异常：<strong>除了 RuntimeException 及其子类以外，其他的 Exception 类及其子类都属于这种异常</strong>。</li><li>非受检异常：包括 RuntimeException 及其子类和 Error。</li></ul><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/java-notes/java/PPjwP.png" width="600"></div><p>注意：非受检查异常为编译器不要求强制处理的异常，受检异常则是编译器要求必须处置的异常。</p><p>Exception 这类异常分为<strong>运行时异常</strong>和<strong>非运行时异常（编译异常）</strong>：</p><ul><li>运行时异常 ：包括 RuntimeException 及其子类。比如 NullPointerException、IndexOutOfBoundsException。属于非受检异常，可以进行捕捉处理，也可以不处理。</li><li>非运行时异常（编译异常）：RuntimeExcaption 以外的 Exception。IOException、SQLException 已经自定义的异常，必须要进行处理。</li></ul><h2 id="java-异常的处理机制" tabindex="-1">Java 异常的处理机制 <a class="header-anchor" href="#java-异常的处理机制" aria-label="Permalink to &quot;Java 异常的处理机制&quot;">​</a></h2><p>Java 异常处理机制本质上就是<strong>抛出异常</strong>和<strong>捕捉异常</strong>。</p><p><strong>抛出异常</strong></p><p>i.普通问题:指在当前环境下能得到足够的信息，总能处理这个错误。</p><p>ii.异常情形:是指<strong>阻止当前方法或作用域继续执行的问题</strong>。对于异常情形，已经程序无法执行继续下去了， 因为在当前环境下无法获得必要的信息来解决问题，我们所能做的就是从当前环境中跳出，并把问题提交给上一级环境， 这就是抛出异常时所发生的事情。</p><p>iii.抛出异常后，会有几件事随之发生： ​<br> 第一：像创建普通的java对象一样将使用new在堆上创建一个异常对象</p><p>第二：当前的执行路径（已经无法继续下去了）被终止，并且从当前环境中弹出对异常对象的引用。 ​<br> 此时，<strong>异常处理机制接管程序，并开始寻找一个恰当的地方继续执行程序</strong>， 这个恰当的地方就是异常处理程序或者异常处理器， 它的任务是<strong>将程序从错误状态中恢复</strong>，以使程序要么换一种方式运行，要么继续运行下去。 ​<br><strong>捕捉异常</strong></p><p>在方法抛出异常之后，运行时系统将转为寻找合适的<strong>异常处理器</strong>（exception handler）。 潜在的异常处理器是异常发生时依次存留在<strong>调用栈</strong>中的方法的集合。 当异常处理器所能处理的异常类型与方法抛出的异常类型相符时，即为合适的异常处理器。 运行时系统从发生异常的方法开始，依次回查调用栈中的方法，直至找到含有合适异常处理器的方法并执行。 当运行时系统遍历调用栈而未找到合适的异常处理器，则运行时系统终止。同时，意味着Java程序的终止。</p><p>注意：</p><p>对于运行时异常、错误和受检异常，Java技术所要求的异常处理方式有所不同。</p><p>（1）由于<strong>运行时异常及其子类</strong>的不可查性，为了更合理、更容易地实现应用程序， Java规定，运行时异常将由Java运行时系统自动抛出，<strong>允许应用程序忽略运行时异常</strong>。</p><p>（2）对于方法运行中可能出现的Error，当运行方法不欲捕捉时，Java允许该方法不做任何抛出声明。 因为，大多数Error异常属于永远不能被允许发生的状况，也属于合理的应用程序不该捕捉的异常。</p><p>（3）对于所有的受检异常， Java规定：一个方法必须捕捉，或者声明抛出方法之外。 也就是说，当一个方法选择不捕捉受检异常时，它必须声明将抛出异常。</p><h2 id="java-异常的处理原则" tabindex="-1">Java 异常的处理原则 <a class="header-anchor" href="#java-异常的处理原则" aria-label="Permalink to &quot;Java 异常的处理原则&quot;">​</a></h2><ul><li><strong>具体明确</strong>：抛出的异常应能通过异常类名和message准确说明异常的类型和产生异常的原因；</li><li><strong>提早抛出</strong>：应尽可能早地发现并抛出异常，便于精确定位问题；</li><li><strong>延迟捕获</strong>：异常的捕获和处理应尽可能延迟，让掌握更多信息的作用域来处理异常</li></ul><h2 id="java-常见异常以及错误" tabindex="-1">Java 常见异常以及错误 <a class="header-anchor" href="#java-常见异常以及错误" aria-label="Permalink to &quot;Java 常见异常以及错误&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:center;">类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>RuntimeException 子类</strong></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">java.lang.ArrayIndexOutOfBoundsException</td><td style="text-align:center;">数组索引越界异常。当对数组的索引值为负数或大于等于数组大小时抛出</td></tr><tr><td style="text-align:center;">java.lang.ArithmeticException</td><td style="text-align:center;">算术条件异常。譬如：整数除零等</td></tr><tr><td style="text-align:center;">java.lang.NullPointerException</td><td style="text-align:center;">空指针异常。当应用试图在要求使用对象的地方使用了null时，抛出该异常。譬如：调用null对象的实例方法、访问null对象的属性、计算null对象的长度、使用throw语句抛出null等等</td></tr><tr><td style="text-align:center;">java.lang.ClassNotFoundException</td><td style="text-align:center;">找不到类异常。当应用试图根据字符串形式的类名构造类，而在遍历CLASSPAH之后找不到对应名称的class文件时，抛出该异常</td></tr><tr><td style="text-align:center;">java.lang.SecurityException</td><td style="text-align:center;">安全性异常</td></tr><tr><td style="text-align:center;">java.lang.IllegalArgumentException</td><td style="text-align:center;">非法参数异常</td></tr><tr><td style="text-align:center;"><strong>IOException</strong></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">IOException</td><td style="text-align:center;">操作输入流和输出流时可能出现的异常</td></tr><tr><td style="text-align:center;">EOFException</td><td style="text-align:center;">文件已结束异常</td></tr><tr><td style="text-align:center;">FileNotFoundException</td><td style="text-align:center;">文件未找到异常</td></tr><tr><td style="text-align:center;"><strong>其他</strong></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">ClassCastException</td><td style="text-align:center;">类型转换异常类</td></tr><tr><td style="text-align:center;">ArrayStoreException</td><td style="text-align:center;">数组中包含不兼容的值抛出的异常</td></tr><tr><td style="text-align:center;">SQLException</td><td style="text-align:center;">操作数据库异常类</td></tr><tr><td style="text-align:center;">NoSuchFieldException</td><td style="text-align:center;">字段未找到异常</td></tr><tr><td style="text-align:center;">NumberFormatException</td><td style="text-align:center;">字符串转换为数字抛出的异常</td></tr><tr><td style="text-align:center;">StringIndexOutOfBoundsException</td><td style="text-align:center;">字符串索引超出范围抛出的异常</td></tr><tr><td style="text-align:center;">IllegalAccessException</td><td style="text-align:center;">不允许访问某类异常</td></tr><tr><td style="text-align:center;"><strong>Error</strong></td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">NoClassDefFoundError</td><td style="text-align:center;">找不到class定义的错误</td></tr><tr><td style="text-align:center;">StackOverflowError</td><td style="text-align:center;">深递归导致栈被耗尽而抛出的错误</td></tr><tr><td style="text-align:center;">OutOfMemoryError</td><td style="text-align:center;">内存溢出错误</td></tr></tbody></table><h2 id="try-catch-finally语句块的执行" tabindex="-1">try-catch-finally语句块的执行 <a class="header-anchor" href="#try-catch-finally语句块的执行" aria-label="Permalink to &quot;try-catch-finally语句块的执行&quot;">​</a></h2><div align="center"><img src="https://github.com/DuHouAn/ImagePro/raw/master/java-notes/java/06_00.png" width="600"></div><br><p>(1) try 块：用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。</p><p>(2) catch 块：用于处理try捕获到的异常。</p><p>(3) finally 块：无论是否捕获或处理异常，finally 块里的语句都会被执行。 当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在<strong>方法返回之前</strong>被执行。</p><p>在以下 4 种特殊情况下，finally 语句块不会被执行：</p><ul><li>在finally语句块中发生了异常</li><li>在前面的代码中用了System.exit()退出程序。</li><li>程序所在的线程死亡。</li><li>关闭 CPU。</li></ul><h2 id="try-catch代码块的性能如何" tabindex="-1">try catch代码块的性能如何 <a class="header-anchor" href="#try-catch代码块的性能如何" aria-label="Permalink to &quot;try catch代码块的性能如何&quot;">​</a></h2><ul><li>会影响 JVM 的重排序优化；</li><li>异常对象实例需要保存栈快照等信息，开销比较大。</li></ul><h2 id="try-with-resources" tabindex="-1">try-with-resources <a class="header-anchor" href="#try-with-resources" aria-label="Permalink to &quot;try-with-resources&quot;">​</a></h2><p>适用范围：任何实现 java.lang.AutoCloseable 或者 java.io.Closeable 的对象。</p><p>在 try-with-resources 语句中，任何 catch 或 finally 代码块在声明的资源关闭后运行。</p><p>使用 try-catch-finally 关闭资源：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//读取文本文件的内容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Scanner scanner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scanner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;D://read.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (scanner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scanner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (FileNotFoundException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (scanner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        scanner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>使用 try-with-resources 语句改造上面的代码：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Scanner scanner </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Scanner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (scanner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scanner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (FileNotFoundException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>使用 try-with-resources 语句关闭多个资源：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (BufferedInputStream bin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BufferedInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileInputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里采用 &quot;;&quot; 进行分割</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     BufferedOutputStream bout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BufferedOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;out.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        bout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (IOException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="final-finally-finalize" tabindex="-1">final &amp; finally &amp; finalize <a class="header-anchor" href="#final-finally-finalize" aria-label="Permalink to &quot;final &amp; finally &amp; finalize&quot;">​</a></h2><p>final：最终的意思，可以修饰类，修饰成员变量，修饰成员方法</p><p>修饰类：类不能被继承</p><p>修饰变量：变量是常量</p><p>修饰方法：方法不能被重写（Override）</p><p>(2)finally：是异常处理的关键字，用于释放资源。一般来说，代码必须执行（特殊情况：在执行到finally JVM就退出了）</p><p>(3)finalize：是Object的一个方法，用于垃圾回收。</p><h2 id="看程序写结果" tabindex="-1">看程序写结果 <a class="header-anchor" href="#看程序写结果" aria-label="Permalink to &quot;看程序写结果&quot;">​</a></h2><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ArithmeticException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>结果为：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">30</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="反射-reflection" tabindex="-1">反射-Reflection <a class="header-anchor" href="#反射-reflection" aria-label="Permalink to &quot;反射-Reflection&quot;">​</a></h1><h2 id="反射概念" tabindex="-1">反射概念 <a class="header-anchor" href="#反射概念" aria-label="Permalink to &quot;反射概念&quot;">​</a></h2><p>Java 的反射机制是指在运行状态中：</p><ul><li>对任意一个类，都能够知道这个类的所有属性和方法</li><li>对任意一个对象，都能调用这个对象的所有属性和方法</li></ul><h2 id="反射的作用" tabindex="-1">反射的作用 <a class="header-anchor" href="#反射的作用" aria-label="Permalink to &quot;反射的作用&quot;">​</a></h2><ul><li>检查类的属性和方法</li><li>在运行时检查对象的类型</li><li>动态构造某个类的对象</li><li>可以任意调用对象的方法</li></ul><h2 id="反射的使用" tabindex="-1">反射的使用 <a class="header-anchor" href="#反射的使用" aria-label="Permalink to &quot;反射的使用&quot;">​</a></h2><h3 id="_1-java-lang-reflect-包中的三个类" tabindex="-1">1. java.lang.reflect 包中的三个类 <a class="header-anchor" href="#_1-java-lang-reflect-包中的三个类" aria-label="Permalink to &quot;1. java.lang.reflect 包中的三个类&quot;">​</a></h3><ul><li>Field：成员变量</li><li>Method：成员方法</li><li>Constructor：构造方法</li></ul><h3 id="_2-对-public-域的方法" tabindex="-1">2. 对 public 域的方法 <a class="header-anchor" href="#_2-对-public-域的方法" aria-label="Permalink to &quot;2. 对 public 域的方法&quot;">​</a></h3><p>包括父类成员。</p><ul><li>getField</li><li>getMethod</li><li>getConstructor</li></ul><h3 id="_3-对其他域的方法" tabindex="-1">3. 对其他域的方法 <a class="header-anchor" href="#_3-对其他域的方法" aria-label="Permalink to &quot;3. 对其他域的方法&quot;">​</a></h3><p>包括 private 和 protected 的成员，但不包括父类成员。</p><ul><li>getDeclaredField</li><li>getDeclaredMethod</li><li>getDeclaredConstructor</li></ul><p>利用反射访问私有属性：使用 setAccessible(true)</p><h2 id="反射的不足" tabindex="-1">反射的不足 <a class="header-anchor" href="#反射的不足" aria-label="Permalink to &quot;反射的不足&quot;">​</a></h2><p>性能是一个问题。反射相当于一系列解释操作，通知 Java 虚拟机要做什么，性能比直接的 Java 要慢很多。</p><h1 id="补充" tabindex="-1">补充 <a class="header-anchor" href="#补充" aria-label="Permalink to &quot;补充&quot;">​</a></h1><ul><li><p><a href="https://www.cnblogs.com/Qian123/p/5715402.html" target="_blank" rel="noreferrer">Java提高篇——Java异常处理</a></p></li><li><p><a href="https://www.sczyh30.com/posts/Java/java-reflection-1/" target="_blank" rel="noreferrer">深入解析Java反射（1） - 基础</a></p></li></ul>`,80),e=[l];function p(h,r,k,d,E,c){return a(),i("div",null,e)}const y=s(t,[["render",p]]);export{o as __pageData,y as default};
