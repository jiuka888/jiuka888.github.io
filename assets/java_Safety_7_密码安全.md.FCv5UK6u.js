import{_ as a,c as l,o as i,a4 as e}from"./chunks/framework.DpC1ZpOZ.js";const m=JSON.parse('{"title":"密码安全","description":"","frontmatter":{},"headers":[],"relativePath":"java/Safety/7_密码安全.md","filePath":"java/Safety/7_密码安全.md","lastUpdated":null}'),t={name:"java/Safety/7_密码安全.md"},o=e('<h1 id="密码安全" tabindex="-1">密码安全 <a class="header-anchor" href="#密码安全" aria-label="Permalink to &quot;密码安全&quot;">​</a></h1><h2 id="密码泄露渠道" tabindex="-1">密码泄露渠道 <a class="header-anchor" href="#密码泄露渠道" aria-label="Permalink to &quot;密码泄露渠道&quot;">​</a></h2><ul><li>数据库被偷</li><li>服务器被入侵</li><li>通讯被窃听</li><li>内部人员泄露数据</li></ul><h2 id="存储" tabindex="-1">存储 <a class="header-anchor" href="#存储" aria-label="Permalink to &quot;存储&quot;">​</a></h2><ul><li>严禁明文存储（防泄露）</li><li>单向变换（防泄露）</li><li>变换复杂度要求（防猜解）</li><li>密码复杂度要求（防猜解）</li><li>加盐（防猜解）</li></ul><h2 id="哈希算法" tabindex="-1">哈希算法 <a class="header-anchor" href="#哈希算法" aria-label="Permalink to &quot;哈希算法&quot;">​</a></h2><h3 id="_1-哈希算法特点" tabindex="-1">1. 哈希算法特点 <a class="header-anchor" href="#_1-哈希算法特点" aria-label="Permalink to &quot;1. 哈希算法特点&quot;">​</a></h3><ul><li>明文-密文一一对应</li><li>雪崩效应（明文稍微变化，得到的密文就会有很大的不同）</li><li>密文-明文无法反推</li><li>密文固定长度</li></ul><h3 id="_2-常见哈希算法" tabindex="-1">2. 常见哈希算法 <a class="header-anchor" href="#_2-常见哈希算法" aria-label="Permalink to &quot;2. 常见哈希算法&quot;">​</a></h3><ul><li>md5</li><li>sha1</li><li>sha256</li></ul><h3 id="_3-加密变换次数越多越安全" tabindex="-1">3. 加密变换次数越多越安全 <a class="header-anchor" href="#_3-加密变换次数越多越安全" aria-label="Permalink to &quot;3. 加密变换次数越多越安全&quot;">​</a></h3><ul><li>加密成本基本不变（生成密码时会慢一点）</li><li>彩虹表会失效（数量太大，无法建立通用性）</li><li>时解密唱本增大 N 倍</li></ul><h2 id="密码加盐" tabindex="-1">密码加盐 <a class="header-anchor" href="#密码加盐" aria-label="Permalink to &quot;密码加盐&quot;">​</a></h2><ul><li>在用户表中加上 <code>salt</code>字段</li><li>如果用户没有 <code>salt</code> 值，则需要升级</li><li>如果用户 <code>salt</code> 值已存在，则不需升级</li></ul><h2 id="密码传输安全" tabindex="-1">密码传输安全 <a class="header-anchor" href="#密码传输安全" aria-label="Permalink to &quot;密码传输安全&quot;">​</a></h2><ul><li>HTTPS 传输</li><li>频率限制</li><li>前端加密</li></ul>',16),r=[o];function h(d,n,s,c,_,u){return i(),l("div",null,r)}const b=a(t,[["render",h]]);export{m as __pageData,b as default};
