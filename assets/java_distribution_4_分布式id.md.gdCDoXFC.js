import{_ as a,c as i,o as e,a4 as t}from"./chunks/framework.DpC1ZpOZ.js";const I=JSON.parse('{"title":"分布式 ID","description":"","frontmatter":{},"headers":[],"relativePath":"java/distribution/4_分布式id.md","filePath":"java/distribution/4_分布式id.md","lastUpdated":1728037326000}'),l={name:"java/distribution/4_分布式id.md"},r=t('<h1 id="分布式-id" tabindex="-1">分布式 ID <a class="header-anchor" href="#分布式-id" aria-label="Permalink to &quot;分布式 ID&quot;">​</a></h1><h2 id="分布式-id-1" tabindex="-1">分布式 ID <a class="header-anchor" href="#分布式-id-1" aria-label="Permalink to &quot;分布式 ID&quot;">​</a></h2><p>我们知道 ID 是数据的唯一标识，比如比如身份证 ID 对应且仅对应一个人，商品 ID 对应且仅对应一件商品。分布式 ID 是分布式系统下的 ID，分布式 ID 不存在与现实生活中，属于计算机系统中的一个概念。一个最基本的分布式 ID 需要满足以下要求：</p><ul><li><p>全局唯一</p></li><li><p>高性能</p><p>生成速度快，对本地资源消耗小</p></li><li><p>高可用</p><p>生成分布式 ID 的服务要保证可用性无限接近于 100%</p></li><li><p>拿来即可用</p></li></ul><p>除此之外，设计一个比较好的分布式 ID 还应保证：</p><ul><li><p>安全性</p><p>ID 不应该包含敏感信息</p></li><li><p>有序递增</p><p>如果要把 ID 存放在数据库的话，ID 的有序性可以提升数据库写入速度。并且，很多时候 ，我们还很有可能会直接通过 ID 来进行排序。</p></li><li><p>可独立部署</p><p>独立部署就是分布式系统单独有一个<strong>发号器服务</strong>，专门用来生成分布式 ID。这样就生成 ID 的服务可以和业务相关的服务解耦。不过，这样同样带来了网络调用消耗增加的问题。总的来说，如果需要用到分布式 ID 的场景比较多的话，独立部署的发号器服务还是很有必要的。</p></li><li><p>包含具体业务含义</p></li></ul><h2 id="分布式-id-生成方案" tabindex="-1">分布式 ID 生成方案 <a class="header-anchor" href="#分布式-id-生成方案" aria-label="Permalink to &quot;分布式 ID 生成方案&quot;">​</a></h2><h3 id="数据库" tabindex="-1">数据库 <a class="header-anchor" href="#数据库" aria-label="Permalink to &quot;数据库&quot;">​</a></h3><h3 id="算法" tabindex="-1">算法 <a class="header-anchor" href="#算法" aria-label="Permalink to &quot;算法&quot;">​</a></h3><h3 id="开源框架" tabindex="-1">开源框架 <a class="header-anchor" href="#开源框架" aria-label="Permalink to &quot;开源框架&quot;">​</a></h3>',10),o=[r];function d(p,n,s,h,_,c){return e(),i("div",null,o)}const u=a(l,[["render",d]]);export{I as __pageData,u as default};
